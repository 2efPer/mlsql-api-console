{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/MLSQLQueryApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","url","createClass","key","method","body","successCallback","serverErrorCallback","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","HTTP","res","text","get","catch","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","MLSQLAuth","callback","request","apiResponse","removeItem","error","m","console","log","userName","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","serverError","uuidv4","require","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","self","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","ok","fail","executeQuery","enterLoading","select","getSelection","finalSQL","getAllText","jobName","auth","Auth","startTime","Date","getTime","measureTime","exitLoading","sql","owner","sessionPerUser","show_stack","wow","getDisplay","update","stringify","str","selectionRange","getSelectionRange","session","getTextRange","queryApp","display","commandGroup","loading","parent","React","newValue","react","className","lib_default","a","ref","mode","theme","width","height","onChange","name","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","MLSQLAceEditor_CommandGroup","CommandGroup","_this2","es_button","onClick","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","length","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","preventDefault","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isDir","isExpanded","toggleIsExpanded","scriptFile","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","title","fileName","target","finish","create","params","endsWith","msg","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","style","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","_this3","removeFile","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","deleteMenu","_this4","menu","MLSQLQueryDisplay","data","keys","basket","rows","forEach","item","dataIndex","index","new_item","columns","table","dataSource","MLSQLQueryApp","sqlContent","createRef","react_default","createElement","MLSQLTreeNode_ScriptNodeTree","src_components_MLSQLAceEditor","MLSQLQueryDisplay_MLSQLQueryDisplay","Component","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","app","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","message","FormValidate","validate","src_components_MLSQLQueryApp","type","validateUserName","validatePassword","isEmail","test","normal","App","menuRef","navbar","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oKClBOC,UAAS,CAClBC,IAAK,MACLC,KAAM,OACNC,IAAK,QAGIC,EAAS,CAClBC,QAAS,IACTC,WAAY,IACZC,aAAc,IACdC,UAAW,IACXC,YAAa,KAGJC,EACH,eCbGD,EACT,SAAAA,EAAYE,GAAUC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAClBK,KAAKC,MAAQJ,GAIRK,EAMT,SAAAA,EAAYC,EAAQN,EAASO,GAAa,IAAAC,EAAAL,KAAAF,OAAAC,EAAA,EAAAD,CAAAE,KAAAE,GAAAF,KAM1CM,KAAO,SAACC,EAASC,GAEbH,EAAKR,QAAQY,KAAK,SAACC,GACf,IACI,IAAMC,EAAUC,KAAKC,MAAMH,GAC3BH,EAAQI,GACV,MAAOG,GACLN,EAAQE,OAZhBV,KAAKG,OAASA,EACdH,KAAKH,QAAUA,EACfG,KAAKI,YAAcA,GAkBdW,EAAb,WAEI,SAAAA,EAAYC,GAAMlB,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,GACdf,KAAKgB,IAAMA,EAHnB,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAAiB,EAAA,EAAAG,IAAA,UAAAjB,MAAA,SAMYkB,EAAQC,EAAMC,EAAiBC,GACnCH,EAASA,EAAOI,cAEhB,IAAIC,EAAW,GACf,IAAK,IAAIC,KAAYL,EAAM,CACvB,IAAIM,EAAaC,mBAAmBF,GAChCG,EAAeD,mBAAmBP,EAAKK,IAC3CD,EAASK,KAAKH,EAAa,IAAME,GAGrC,IAAIE,EAAS9B,KAAKgB,IAQlB,MANe,QAAXG,GACAW,EAASA,EAAS,IAAMN,EACxBA,OAAWO,GAEXP,EAAWA,EAASQ,KAAK,KAEtBC,MAAMH,EAAQ,CACjBX,OAAQA,EACRe,QAAS,CACLC,eAAgB,oCAChBC,OAAU,mBACVC,eAAgBC,eAAeC,QAAQC,IAA0B,IAErEpB,KAAMI,IAELf,KAAK,SAACgC,GACHpB,EAAgB,IAAInB,EAAYuC,EAAItC,OAAQsC,EAAIC,OAAQD,EAAIP,QAAQS,IAAIH,OAE3EI,MAAM,SAACH,GACJnB,EAAoB,IAAI3B,EAAY8C,UArCpD1B,EAAA,GC/Ba8B,EAAsC,sBACtCC,EAAsC,6BACtCC,EAAmC,0BACnCC,EAA8B,qBCD9BC,EAAb,oBAAAA,IAAAnD,OAAAC,EAAA,EAAAD,CAAAE,KAAAiD,GAAA,OAAAnD,OAAAmB,EAAA,EAAAnB,CAAAmD,EAAA,EAAA/B,IAAA,UAAAjB,MAAA,WAGQ,OAAyD,OAAlDqC,eAAeC,QAAQC,KAHtC,CAAAtB,IAAA,WAAAjB,MAAA,SAUaiD,GAEO,IAAInC,EDhBqB,yBCoCjCoC,QAAQX,EAAYrD,IAAK,GAfX,SAACiE,GAKXA,EAAYjD,SAAWqC,EAAY/C,aACnC6C,eAAee,WAAWb,GAE1BY,EAAYvD,QAAQY,KAAM,SAAAC,GACtBwC,EAAStC,KAAKC,MAAMH,GAAX,YACTkC,MAAM,SAACU,OAKyB,SAACC,GACzCC,QAAQC,IAAIF,OAjCxB,CAAArC,IAAA,QAAAjB,MAAA,SAyCUyD,EAAUC,EAAUC,EAAYC,GAClC7D,KAAK8D,gBD7C6B,qBC6CYJ,EAAUC,EAAUC,EAAYC,KA1CtF,CAAA3C,IAAA,SAAAjB,MAAA,WA8CQqC,eAAee,WAAWb,KA9ClC,CAAAtB,IAAA,WAAAjB,MAAA,SAqDayD,EAAUC,EAAUC,EAAYC,GACrC7D,KAAK8D,gBD3DgC,wBC2DYJ,EAAUC,EAAUC,EAAYC,KAtDzF,CAAA3C,IAAA,kBAAAjB,MAAA,SAyDoBe,EAAK0C,EAAUC,EAAUC,EAAYC,GACjD,IAEMzC,EAAO,CACTsC,SAAUA,EACVC,SAAUA,GAJF,IAAI5C,EAASC,GAuBrBmC,QAAQX,EAAYpD,KAAMgC,EAbZ,SAACgC,GACXA,EAAYhD,aACZkC,eAAeyB,QAAQvB,EAAuBY,EAAYhD,aAE9DwD,EAAWR,IAMO,SAACY,GACnBH,EAAeG,SA/E3Bf,EAAA,iFCUMgB,EAASC,EAAQ,KAGjBC,cAEF,SAAAA,EAAYC,GAAO,IAAA/D,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACf9D,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAqE,GAAAI,KAAAvE,KAAMoE,KAOV1B,KAAO,SAACzC,EAAOuE,GACXnE,EAAKoE,SAAS,CAACxE,MAAOA,EAAOuE,SAAUA,IACvCnE,EAAKqE,aAAaC,QAAQC,OAAOC,SAAS5E,IAV3BI,EAiBnByE,YAAc,WACV,IAAMC,EAAM,IAAIhE,EAASiE,GACnBC,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAO,IAEJ8E,EAAa9E,EAAK+E,yBAEnBH,EAAKI,MAAMb,SAKhBO,EAAI5B,QAAQX,EAAYpD,KAAM,CAC1BkG,GAAIL,EAAKI,MAAMb,SACf3E,QAASoF,EAAKM,eAAeC,YAC9B,SAACC,GACAN,EAAWN,SAAS,UACrB,SAACa,MATAP,EAAWN,SAAS,2CAxBTxE,EAsCnBsF,aAAe,WACXtF,EAAKuF,eACL,IAAMb,EAAM,IAAIhE,EAASiE,GACnBC,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAO,IACV4E,EAAKG,yBAAyBP,SAAS,IAEvC,IAAMgB,EAASZ,EAAKa,eAChBC,EAAWd,EAAKe,aAEdC,EAAUhC,IACD,KAAX4B,IACAE,EAAWF,GAGf,IAAMK,EAAO,IAAIC,EACXC,GAAY,IAAIC,MAAOC,UAE7B,SAASC,IAGL,OAFAtB,EAAKuB,eACW,IAAIH,MAAOC,UACVF,EAGrBF,EAAKxC,SAAS,SAACA,GAEXqB,EAAI5B,QAAQX,EAAYpD,KAAM,CAC1BqH,IAAKV,EACLW,MAAOhD,EACPuC,QAASA,EACTU,gBAAgB,EAChBC,YAAY,GACb,SAACnB,GACAA,EAAGnF,KAAK,SAACuG,GAEL,IACI5B,EAAK6B,aAAaC,OAAOF,GACzB5B,EAAKG,yBAAyBP,SAAS,eAAiB0B,IAAgB,MAC1E,MAAOzF,GACLmE,EAAKG,yBAAyBP,SAAS,0CAA4CjE,KAAKoG,UAAUH,MAGvG,SAACrG,GACAyE,EAAKG,yBAAyBP,SAASrE,EAAU,eAAiB+F,IAAgB,SAEvF,SAACb,GACAA,EAAKzF,QAAQJ,QAAQ,SAACoH,GAClBhC,EAAKG,yBAAyBP,SAASoC,EAAM,eAAiBV,IAAgB,aApF3ElG,EA6FnB2F,WAAa,WACT,OAAO3F,EAAKkF,eAAeC,YA9FZnF,EAiGnByF,aAAe,WACX,IAAIoB,EAAiB7G,EAAKkF,eAAe4B,oBAEzC,OADc9G,EAAKkF,eAAe6B,QAAQC,aAAaH,IAnGxC7G,EAuGnBkF,aAAe,WACX,OAAOlF,EAAKqE,aAAaC,QAAQC,QAxGlBvE,EA2GnB+E,uBAAyB,WACrB,OAAO/E,EAAKiH,SAASnC,WAAWR,QAAQC,QA5GzBvE,EA+GnByG,WAAa,WACT,OAAOzG,EAAKiH,SAASC,QAAQ5C,SAhHdtE,EAmHnBuF,aAAe,WACXvF,EAAKmH,aAAa7C,QAAQF,SAAS,CAACgD,SAAS,KApH9BpH,EAuHnBmG,YAAc,WACVnG,EAAKmH,aAAa7C,QAAQF,SAAS,CAACgD,SAAS,KAtH7CpH,EAAKiH,SAAWjH,EAAK+D,MAAMsD,OAC3BrH,EAAKqE,aAAeiD,cACpBtH,EAAKmH,aAAeG,cACpBtH,EAAKgF,MAAQ,CAACpF,MAAO,GAAIwH,SAAS,GALnBpH,wEAaVuH,qCAkHL,OACIC,EAAA,qBAAKC,UAAU,qBACXD,EAAA,yBAAKA,EAAA,cAACE,EAAAC,EAAD,CACDC,IAAKjI,KAAK0E,aACVwD,KAAK,MACLC,MAAM,SACNC,MAAO,OACPC,OAAQ,QACRC,SAAUtI,KAAKsI,SACfC,KAAK,eACLC,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrB1I,MAAM,GACN2I,YAAa,CACTC,gBAAiBC,KAErBC,WAAY,CACRC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,MAGjBvB,EAAA,cAACwB,EAAD,CAAcpB,IAAKjI,KAAKwH,aAAcE,OAAQ1H,eA3JjC2H,aAkKvB2B,cACF,SAAAA,EAAYlF,GAAO,IAAAmF,EAAA,OAAAzJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAsJ,IACfC,EAAAzJ,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAwJ,GAAA/E,KAAAvE,KAAMoE,KACDiB,MAAQ,CAACoC,SAAS,GACvB8B,EAAK7B,OAAStD,EAAMsD,OAHL6B,wEAOf,OACI1B,EAAA,qBAAKC,UAAU,wBACXD,EAAA,cAAC2B,EAAA,EAAD,CAAQC,QAASzJ,KAAK0H,OAAO/B,aACrB8B,QAASzH,KAAKqF,MAAMoC,SAD5B,gBAEAI,EAAA,cAAC2B,EAAA,EAAD,CAAQC,QAASzJ,KAAK0H,OAAO5C,aAA7B,wBAZW6C,aAmBZxD,4FC3JAuF,gDA3BXC,MAAQ,SAACC,GACL,IAAkBC,EAAkBC,EAAhCC,EAAU,GAAUC,EAAQ,GAChC,IAAKF,EAAI,EAAGA,EAAIF,EAAKK,OAAQH,GAAK,EAC9BC,EAAQH,EAAKE,GAAGxE,IAAMwE,EACtBF,EAAKE,GAAGI,WAAa,GAEzB,IAAKJ,EAAI,EAAGA,EAAIF,EAAKK,OAAQH,GAAK,EAE9B,GAAsB,KADtBD,EAAOD,EAAKE,IACHK,SACL,IACIP,EAAKG,EAAQF,EAAKM,WAAWD,WAAWrI,KAAKgI,GAC/C,MAAO/I,GACL0C,QAAQC,IAAI,gBACZD,QAAQC,IAAIoG,GACZrG,QAAQC,IAAIsG,EAAQF,EAAKM,gBAI7BH,EAAMnI,KAAKgI,GAGnB,OAAOG,KCbFI,EAAb,SAAAC,GAEI,SAAAD,EAAYhG,GAAO,IAAA/D,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAAoK,IACf/J,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAsK,GAAA7F,KAAAvE,KAAMoE,KAWVkG,WAAa,WAET,IAAMvF,EAAM,IAAIhE,EAASwJ,GACnBtF,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAO,IAyBV0E,EAAI5B,QAAQX,EAAYrD,IAAK,GApBb,SAACsG,GACbA,EAAG5F,QAAQY,KAAK,SAACC,GAKb,IAAI8J,EAAU,GACd,IACIA,EAAU5J,KAAKC,MAAMH,GAAK,MAC5B,MAAOI,IAIT,IACM2J,GADU,IAAIC,GACIf,MAAMa,GAASG,KAAK,SAAC3C,EAAG4C,GAC5C,OAAO5C,EAAE1C,GAAKsF,EAAEtF,KAEpBL,EAAKR,SAAS,CAACoG,MAAOJ,OAGY,SAACK,OAxC5BzK,EAiEnB0K,WAAa,SAACC,GACV,OAAO3K,EAAKgF,MAAMwF,MAAM,GAAGvF,KAAO0F,GAlEnB3K,EAqEnB4K,kBAAoB,SAACpB,EAAMqB,EAAWpK,GAClCA,EAAEqK,iBACF,IAAMlG,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAO,IACV+K,IAAYC,KACRxD,EAAA,cAACyD,EAAD,CAAoB5D,OAAQzC,EAAM+F,OAAQnB,EAAKvE,KAC/C,CAACiG,KAAMzK,EAAE0K,QAASC,IAAK3K,EAAE4K,SACzB,kBAAMrL,EAAKoE,SAAS,CAACkH,mBAAmB,MAE5CtL,EAAKoE,SAAS,CAACkH,mBAAmB,KA7EnBtL,EAgFnBuL,oBAAsB,SAAC/B,EAAMqB,EAAWpK,GACpC,GAAI+I,EAAKgC,MACLhC,EAAKiC,YAAcjC,EAAKiC,WACxBzL,EAAK0L,iBAAiBlC,EAAKvE,GAAIuE,EAAKiC,gBACjC,CACH,IAAM/G,EAAM,IAAIhE,EAASwJ,GACnBtF,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAO,IACV0E,EAAI5B,QAAQX,EAAYrD,IAAK,CAACmG,GAAIuE,EAAKvE,IAAK,SAACG,GACzCA,EAAG5F,QAAQY,KAAK,SAACC,GACb,IAAMsL,EAAapL,KAAKC,MAAMH,GAAK,MACnCuE,EAAKyC,OAAO9C,OAAOD,QAAQjC,KAAKsJ,EAAWnM,QAASgK,EAAKvE,OAE9D,SAACI,MAKRrF,EAAKoE,SAASpE,EAAKgF,QAjGJhF,EAqGnB4L,gBAAkB,SAACC,EAAUhB,EAAWpK,GACpC,IAAMqL,EAAqBD,EAASE,WAC/BtL,EAAEuL,UACHhM,EAAKiM,YAAYjM,EAAKgF,MAAMwF,MAAO,SAAA0B,GAAC,OAAKA,EAAEH,YAAa,IAE5DF,EAASE,WAAmC,MAAtBD,IAAqCA,EAC3D9L,EAAKoE,SAASpE,EAAKgF,QA3GJhF,EA8GnB0L,iBAAmB,SAACzG,EAAIwG,GACpB,IAAM/G,EAAM,IAAIhE,EAASwJ,GACfzK,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAO,IACV0E,EAAI5B,QAAQX,EAAYpD,KAAM,CAACkG,GAAIA,EAAIwG,WAAYA,GAAa,SAACrG,GAC7DA,EAAG5F,QAAQY,KAAK,SAACC,OAGlB,SAACgF,OArHWrF,EAyHnBmM,mBAAqB,SAACN,GAClBA,EAASJ,YAAa,EACtBzL,EAAKoE,SAASpE,EAAKgF,QA3HJhF,EA8HnBoM,iBAAmB,SAACP,GAChBA,EAASJ,YAAa,EACtBzL,EAAKoE,SAASpE,EAAKgF,QA1HnBhF,EAAKgF,MAAQ,CAACsG,mBAAmB,EAAOe,wBAAwB,GAChErM,EAAKqH,OAASrH,EAAK+D,MAAMsD,OACzBrH,EAAKiK,aARUjK,EAFvB,OAAAP,OAAA6M,EAAA,EAAA7M,CAAAsK,EAAAC,GAAAvK,OAAAmB,EAAA,EAAAnB,CAAAsK,EAAA,EAAAlJ,IAAA,SAAAjB,MAAA,WAgDQ,OACI4H,EAAA,yBACIA,EAAA,cAAC+E,EAAA,EAAD,CACIC,SAAU7M,KAAKqF,MAAMwF,MACrBiC,YAAa9M,KAAKiM,gBAClBc,eAAgB/M,KAAKwM,mBACrBQ,aAAchN,KAAKyM,iBACnBxB,kBAAmBjL,KAAKiL,kBACxBgC,kBAAmBjN,KAAK4L,oBACxB9D,UAAU,yBAEb9H,KAAKqF,MAAMqH,uBACR7E,EAAA,cAACqF,EAAD,CAAoBlC,OAAQhL,KAAKqF,MAAM2F,OAAQtD,OAAQ1H,KACnCsH,SAAUtH,KAAK0H,SAAgC,MA7DvF,CAAAxG,IAAA,cAAAjB,MAAA,SAqIgB4K,EAAO3H,GACf,GAAa,MAAT2H,EAAJ,CADyB,IAAAsC,GAAA,EAAAC,GAAA,EAAAC,OAAAtL,EAAA,IAKzB,QAAAuL,EAAAC,EAAmB1C,EAAnB2C,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA0B,KAAftD,EAAeyD,EAAArN,MACtBiD,EAAS2G,GACT7J,KAAKsM,YAAYzC,EAAKK,WAAYhH,IAPb,MAAA0K,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,SArIjCjD,EAAA,CAAoCzC,aAiJ9BmG,cAMF,SAAAA,EAAY1J,GAAO,IAAAmF,EAAA,OAAAzJ,OAAAC,EAAA,EAAAD,CAAAE,KAAA8N,IACfvE,EAAAzJ,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAgO,GAAAvJ,KAAAvE,KAAMoE,KAWV2J,MAAQ,WACJ,OAAIxE,EAAKnF,MAAMsD,OAAOrC,MAAMwG,MACjB,gBAEC,iBAhBGtC,EAmBnByE,SAAW,SAAClN,GACRyI,EAAK9E,SAAS,CAACuJ,SAAUlN,EAAEmN,OAAOhO,SApBnBsJ,EAsBnB1J,QAAU,SAACiB,GACPyI,EAAK9E,SAAS,CAAC5E,QAASiB,EAAEmN,OAAOhO,SAvBlBsJ,EA0BnB2E,OAAS,WACL3E,EAAKnF,MAAMsD,OAAOjD,SAAS,CAACiI,wBAAwB,IACpDnD,EAAKnF,MAAMsD,OAAO4C,cA5BHf,EA+BnB4E,OAAS,WAEL,IAAMpJ,EAAM,IAAIhE,EAASwJ,GACnBtF,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAyJ,IAiBJ6E,EAAS,CACXJ,SAAUzE,EAAKlE,MAAM2I,SACrBnC,MAAOtC,EAAKnF,MAAMsD,OAAOrC,MAAMwG,MAC/BhM,QAAS0J,EAAKlE,MAAMxF,QACpBsK,SAAUZ,EAAKnF,MAAM4G,QAGpBoD,EAAOJ,SAKPI,EAAOvC,OAAUuC,EAAOJ,SAASK,SAAS,UAK/CtJ,EAAI5B,QAAQX,EAAYpD,KAAMgP,EA5Bd,SAAC3I,GACTA,EAAGtF,SAAWqC,EAAYjD,QAC1B0F,EAAKiJ,SAELzI,EAAG5F,QAAQY,KAAK,SAAC6N,GACb/E,EAAK9E,SAAS,CAAC6J,IAAOA,OAuBa,SAACxD,GAC5C7F,EAAKR,SAAS,CAAC6J,IAAK,mBALpB/E,EAAK9E,SAAS,CAAC6J,IAAO,wCALtB/E,EAAK9E,SAAS,CAAC6J,IAAO,kCA3DX/E,EAyEnBgF,MAAQ,WAIJ,IAAM7G,EAAS6B,EAAKnF,MAAMsD,OAC1BA,EAAOjD,SAAS,CAACiI,wBAAwB,IACzChF,EAAO4C,cA1EPf,EAAKlE,MAAQ,CACTiJ,IAAK,IAET/E,EAAKpE,WAAaoE,EAAKnF,MAAMkD,SAASnC,WAAWR,QAAQC,OACzD2E,EAAKiF,cAAgBjF,EAAKnF,MAAMsD,OATjB6B,wEAmFf,IACMkF,EAAUC,IAAWC,IAAQC,KAAMD,IAAQE,YADnB,sCAE9B,OACIhH,EAAA,yBACIA,EAAA,cAACiH,EAAA,EAAD,CAAShH,UAAU,uBAAuBiH,QAAQ,EAAMC,WAAW,GAC/DnH,EAAA,qBAAKC,UAAW2G,GACZ5G,EAAA,cAACoH,EAAA,EAAD,KAAKjP,KAAK+N,QAAV,KAEAlG,EAAA,qBAAKC,UAAU,6BAEXD,EAAA,mBAAGqH,MAAO,CAACC,MAAO,QACbnP,KAAKqF,MAAMiJ,KAEhBzG,EAAA,cAACuH,EAAA,EAAD,CACIC,WAAW,oCACXC,MAAM,WACNC,SAAS,WACTC,UAAU,cACV3H,EAAA,cAAC4H,EAAA,EAAD,CAAYnK,GAAG,WAAWoK,YAAY,gBAAgBpH,SAAUtI,KAAKgO,aAG7EnG,EAAA,yBACAA,EAAA,cAAC8H,EAAA,EAAD,CAAQlG,QAASzJ,KAAKmO,QAAtB,UAIAtG,EAAA,cAAC8H,EAAA,EAAD,CAAQC,OAAQC,IAAOC,OAAQrG,QAASzJ,KAAKuO,MAAOW,MAAO,CAACa,MAAO,UAAnE,mBAnHSpI,aA+H3BqI,cAMF,SAAAA,EAAY5L,GAAO,IAAA6L,EAAA,OAAAnQ,OAAAC,EAAA,EAAAD,CAAAE,KAAAgQ,IACfC,EAAAnQ,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAkQ,GAAAzL,KAAAvE,KAAMoE,KAKV8L,WAAa,WACT,IAAMnL,EAAM,IAAIhE,EAASwJ,GACnBtF,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAmQ,IAEVlL,EAAI5B,QAAQX,EAAYpD,KAAM,CAC1BkG,GAAIL,EAAK+F,QACV,SAACvF,GACIA,EAAGtF,SAAWqC,EAAYjD,QAC1B0F,EAAKyC,OAAO4C,aAEZ7E,EAAG5F,QAAQY,KAAK,SAAC6N,GACbrJ,EAAKyC,OAAOjD,SAAS,CAAC6J,IAAKA,OAKpC,SAAC5I,GACAT,EAAKyC,OAAOjD,SAAS,CAAC6J,IAAK,oBAvBhB2B,EA2BnBE,gBAAkB,WACd,OAAOF,EAAKvI,OAAOqD,WAAWkF,EAAKjF,SA5BpBiF,EA+BnBG,kBAAoB,WAChB,IAAKH,EAAKE,kBACN,OAAOtI,EAAA,cAACwI,EAAA,EAAD,CAAUC,KAAK,WAAW5N,KAAK,gBAAgB+G,QAAU,WAC5DwG,EAAKvI,OAAOjD,SAAS,CACjBiI,wBAAwB,EACxB1B,OAAQiF,EAAKjF,OACba,OAAO,KAEZ0E,KAN6DzQ,OAAAoF,EAAA,EAAApF,CAACA,OAAAoF,EAAA,EAAApF,CAAAmQ,QAjCtDA,EA2CnBO,kBAAoB,WAChB,OAAKP,EAAKE,kBAIC,iBAHA,iBA7CIF,EAoDnBQ,WAAa,WACT,IAAKR,EAAKE,kBACN,OAAOtI,EAAA,cAACwI,EAAA,EAAD,CAAUC,KAAK,SAAS5N,KAAK,SAAS+G,QAAU,WACnDwG,EAAKC,cACNK,KAFoDzQ,OAAAoF,EAAA,EAAApF,CAACA,OAAAoF,EAAA,EAAApF,CAAAmQ,QApD5DA,EAAKvI,OAASuI,EAAK7L,MAAMsD,OACzBuI,EAAKjF,OAASiF,EAAK7L,MAAM4G,OAHViF,wEA6DV,IAAAS,EAAA1Q,KACL,OACI6H,EAAA,yBACIA,EAAA,cAAC8I,EAAA,EAAD,KACK3Q,KAAKoQ,oBACNvI,EAAA,cAACwI,EAAA,EAAD,CAAUC,KAAK,aAAa5N,KAAM1C,KAAKwQ,oBAAqB/G,QAAU,WAClEiH,EAAKhJ,OAAOjD,SAAS,CACjBiI,wBAAwB,EACxB1B,OAAQ0F,EAAK1F,OACba,OAAO,KAEZ0E,KAAKvQ,QACPA,KAAKyQ,sBA/EO9I,+BCtSpBiJ,EAAb,SAAAvG,GACI,SAAAuG,EAAYxM,GAAO,IAAA/D,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAA4Q,IACfvQ,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAA8Q,GAAArM,KAAAvE,KAAMoE,KAIV2C,OAAS,SAAC8J,GAGN,IAAIC,EAAO,GACPC,EAAS,GACTC,EAAO,GAEXH,EAAKI,QAAQ,SAAUC,GACnB,IAAK,IAAIhQ,KAAOgQ,EACPH,EAAO7P,KACR4P,EAAKjP,KAAK,CACNkM,MAAO7M,EACPiQ,UAAWjQ,EACXA,IAAKA,IAET6P,EAAO7P,IAAO,KAM1B2P,EAAKI,QAAQ,SAAUC,EAAME,GACzB,IAAIC,EAAW,GACfP,EAAKG,QAAQ,SAAU/P,GACnBmQ,EAASnQ,EAAIA,KAAOgQ,EAAKhQ,EAAIA,OAEjCmQ,EAAQ,IAAUD,EAClBJ,EAAKnP,KAAKwP,KAGdhR,EAAKoE,SAAS,CAAC6M,QAASR,EAAMD,KAAMG,KAjCpC3Q,EAAKgF,MAAQ,CAACiM,QAAS,GAAIN,KAAM,IAFlB3Q,EADvB,OAAAP,OAAA6M,EAAA,EAAA7M,CAAA8Q,EAAAvG,GAAAvK,OAAAmB,EAAA,EAAAnB,CAAA8Q,EAAA,EAAA1P,IAAA,SAAAjB,MAAA,WAwCQ,OAAQ4H,EAAA,yBACJA,EAAA,cAAC0J,EAAA,EAAD,CAAOD,QAAStR,KAAKqF,MAAMiM,QAASE,WAAYxR,KAAKqF,MAAMwL,YAzCvED,EAAA,CAAuCjJ,aC2CxB8J,cAtCX,SAAAA,EAAYrN,GAAO,IAAA/D,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAAyR,IACfpR,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAA2R,GAAAlN,KAAAvE,KAAMoE,KAEDiB,MAAQ,CAACqM,WAAY,IAC1BrR,EAAKmO,cAAgB7G,IAAMgK,YAC3BtR,EAAKuE,OAAS+C,IAAMgK,YACpBtR,EAAK8E,WAAawC,IAAMgK,YACxBtR,EAAKkH,QAAUI,IAAMgK,YAPNtR,wEAYf,OACIuR,EAAA5J,EAAA6J,cAAA,OAAK/J,UAAU,kBAEX8J,EAAA5J,EAAA6J,cAAA,OAAK/J,UAAU,wBACX8J,EAAA5J,EAAA6J,cAACC,EAAD,CAAgB7J,IAAKjI,KAAKwO,cAAe9G,OAAQ1H,QAErD4R,EAAA5J,EAAA6J,cAAA,OAAK/J,UAAU,gBACX8J,EAAA5J,EAAA6J,cAACE,EAAD,CAAgB9J,IAAKjI,KAAK4E,OAAQ8C,OAAQ1H,OAC1C4R,EAAA5J,EAAA6J,cAAA,OAAK/J,UAAU,oBACX8J,EAAA5J,EAAA6J,cAAC9J,EAAAC,EAAD,CACIK,OAAQ,QACRD,MAAO,OACPH,IAAKjI,KAAKmF,WACV+C,KAAK,OACLC,MAAM,SACNI,KAAK,iBAGbqJ,EAAA5J,EAAA6J,cAAA,OAAK/J,UAAU,uBACX8J,EAAA5J,EAAA6J,cAACG,EAAD,CAAmB/J,IAAKjI,KAAKuH,QAASG,OAAQ1H,iBAjC1CiS,aCCfC,EAAQ,QACRC,GAAW,WAEXC,GAAb,SAAA/H,GAEI,SAAA+H,EAAYhO,GAAO,IAAA/D,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAAoS,IACf/R,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAsS,GAAA7N,KAAAvE,KAAMoE,KAUViO,0BAA4B,WACxB,OAAOhS,EAAKiS,IAAIC,mBAAmB5N,SAZpBtE,EAgBnBmS,OAAS,WACLnS,EAAK6F,KAAKsM,SACVnS,EAAKiS,IAAIG,wBAlBMpS,EAqBnBqS,MAAQ,WACJrS,EAAKmS,SACLnS,EAAKgS,4BAA4B5N,SAAS,CAACkO,UAAWT,KAvBvC7R,EA0BnBuS,SAAW,WACPvS,EAAKmS,SACLnS,EAAKgS,4BAA4B5N,SAAS,CAACkO,UAAWR,MA5BvC9R,EA+BnBoS,qBAAuB,WACnBpS,EAAKoE,SAAS,CAACoO,QAASxS,EAAK6F,KAAK2M,aA9BlCxS,EAAK6F,KAAO,IAAIC,EAChB9F,EAAKgF,MAAQ,CAACwN,QAASxS,EAAK6F,KAAK2M,WACjCxS,EAAKiS,IAAMjS,EAAK+D,MAAMsD,OACtBrH,EAAK6F,KAAKxC,SAAS,SAAC6E,GAChBlI,EAAKoE,SAAS,CAACf,SAAU6E,MANdlI,EAFvB,OAAAP,OAAA6M,EAAA,EAAA7M,CAAAsS,EAAA/H,GAAAvK,OAAAmB,EAAA,EAAAnB,CAAAsS,EAAA,EAAAlR,IAAA,SAAAjB,MAAA,WAsCQ,IAAM6S,EAAcjL,EAAA,cAAC8H,EAAA,EAAD,CAAQ7H,UAAU,cAAcwI,KAAK,SAAS5N,KAAK,QAAQ+G,QAASzJ,KAAK0S,QAEvFK,EAAelL,EAAA,cAAC8H,EAAA,EAAD,CAAQ7H,UAAU,cAAcwI,KAAK,UAAU5N,KAAK,SAC5C+G,QAASzJ,KAAKwS,SAErCQ,EAAiBnL,EAAA,cAAC8H,EAAA,EAAD,CAAQ7H,UAAU,cAAcwI,KAAK,eAAe5N,KAAK,WACjD+G,QAASzJ,KAAK4S,WAC7C,OACI/K,EAAA,yBAAM7H,KAAKqF,MAAMwN,QAAU,YAAc7S,KAAKqF,MAAM3B,SAAW,GAC1D1D,KAAKqF,MAAMwN,QAAUE,EAAeD,EACpCE,OAhDjBZ,EAAA,CAAoCzK,aAsDvBsL,GAAb,SAAAC,GACI,SAAAD,EAAY7O,GAAO,IAAAmF,EAAA,OAAAzJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAiT,IACf1J,EAAAzJ,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAmT,GAAA1O,KAAAvE,KAAMoE,KA6CVV,SAAW,SAAC5C,GACRyI,EAAK9E,SAAS,CAACf,SAAU5C,EAAEmN,OAAOhO,SA/CnBsJ,EAkDnB5F,SAAW,SAAC7C,GACRyI,EAAK9E,SAAS,CAACd,SAAU7C,EAAEmN,OAAOhO,SAnDnBsJ,EAsDnBkJ,qBAAuB,WACnBlJ,EAAK9E,SAAS,CAACoO,QAAStJ,EAAKrD,KAAK2M,aAvDnBtJ,EA6DnB4J,gBAAkB,SAAC/P,GAEf,GAAIA,EAAYjD,SAAWqC,EAAYjD,QACnCgK,EAAK9E,SAAS,CACV2O,wBAAwB,IAE5B7J,EAAK+I,IAAIG,2BACN,CACH,IAAMxN,EAAInF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAyJ,IACJ9F,EAAM,SAAC/C,GACT,IAAI4N,EAAM5N,EACV,IACI4N,EAAM1N,KAAKC,MAAMH,GAAX,IACR,MAAOI,IAETmE,EAAKR,SAAS,CAAC6J,IAAKA,KAExBlL,EAAYvD,QAAQY,KAAKgD,GAAKb,MAAMa,KA9EzB8F,EAwFnB8J,aAAe,SAACrP,GACZuF,EAAK9E,SAAS,CAAC6J,IAAKtK,EAAY/D,MAAMqT,WAzFvB/J,EA4FnBmJ,MAAQ,WACc,IAAIa,GAAJzT,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAyJ,KACJiK,YACVjK,EAAKrD,KAAKwM,MACNnJ,EAAKlE,MAAM3B,SACX6F,EAAKlE,MAAM1B,SAAU4F,EAAK4J,gBAAiB5J,EAAK8J,eAjGzC9J,EAqGnBqJ,SAAW,WACW,IAAIW,GAAJzT,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAyJ,KACJiK,YACVjK,EAAKrD,KAAK0M,SACNrJ,EAAKlE,MAAM3B,SACX6F,EAAKlE,MAAM1B,SAAU4F,EAAK4J,gBAAiB5J,EAAK8J,eAvGxD9J,EAAKrD,KAAO,IAAIC,EAChBoD,EAAK+I,IAAM/I,EAAKnF,MAAMsD,OAEtB6B,EAAKlE,MAAQ,CACT+N,wBAAwB,EACxB9E,IAAK,GACLuE,QAAStJ,EAAKrD,KAAK2M,UACnBF,UAAWpJ,EAAKnF,MAAMuO,WAAaT,GAVxB3I,EADvB,OAAAzJ,OAAA6M,EAAA,EAAA7M,CAAAmT,EAAAC,GAAApT,OAAAmB,EAAA,EAAAnB,CAAAmT,EAAA,EAAA/R,IAAA,SAAAjB,MAAA,WAmBQ,OAAID,KAAKqF,MAAMwN,QAAgBhL,EAAA,cAAC4L,EAAD,MAE3B5L,EAAA,qBAAKC,UAAU,kBACXD,EAAA,qBAAKC,UAAU,uBACXD,EAAA,cAACuH,EAAA,EAAD,CACIC,WAAW,QACXC,MAAM,WACNC,SAAS,WACTC,UAAU,cACV3H,EAAA,cAAC4H,EAAA,EAAD,CAAYnK,GAAG,WAAWoK,YAAY,QAAQpH,SAAUtI,KAAK0D,YAEjEmE,EAAA,cAACuH,EAAA,EAAD,CACIC,WAAW,WACXC,MAAM,WACNC,SAAS,WACTC,UAAU,cACV3H,EAAA,cAAC4H,EAAA,EAAD,CAAYnK,GAAG,WAAWoO,KAAK,WAAWhE,YAAY,WAAWpH,SAAUtI,KAAK2D,YAGpFkE,EAAA,cAAC8H,EAAA,EAAD,CAAQ+D,KAAK,SAAShR,KAAM1C,KAAKqF,MAAMsN,YAAcT,EAAQ,QAAU,WAC/DzI,QAASzJ,KAAKqF,MAAMsN,YAAcT,EAAQlS,KAAK0S,MAAQ1S,KAAK4S,WAChD,KAAnB5S,KAAKqF,MAAMiJ,KAAczG,EAAA,qBAAKC,UAAU,6BAA6B9H,KAAKqF,MAAMiJ,WAxCrG2E,EAAA,CAA0CtL,aAiHpC4L,cAOF,SAAAA,EAAY7L,GAAS5H,OAAAC,EAAA,EAAAD,CAAAE,KAAAuT,GACjBvT,KAAK0H,OAASA,yDAId,OAAO1H,KAAK2T,oBAAsB3T,KAAK4T,8DAKvC,IACMC,EADU,gEACQC,KAAK9T,KAAK0H,OAAOrC,MAAM3B,UAI/C,OAHKmQ,GACD7T,KAAK0H,OAAOjD,SAAS,CAAC6J,IAAK,6BAExBuF,6CAIP,IAAME,EAAS/T,KAAK0H,OAAOrC,MAAM1B,SAASsG,QAAU,EAIpD,OAHK8J,GACD/T,KAAK0H,OAAOjD,SAAS,CAAC6J,IAAO,sCAE1ByF,WC3KAC,eA/BX,SAAAA,EAAY5P,GAAO,IAAA/D,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAAgU,IACf3T,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAE,KAAAF,OAAAwE,EAAA,EAAAxE,CAAAkU,GAAAzP,KAAAvE,KAAMoE,KAKVqO,qBAAuB,WACnBpS,EAAK4T,QAAQtP,QAAQ8N,uBACrBpS,EAAKkS,mBAAmB5N,QAAQ8N,wBANhCpS,EAAK4T,QAAUtM,IAAMgK,YACrBtR,EAAKkS,mBAAqB5K,IAAMgK,YAHjBtR,wEAYf,OACIuR,EAAA5J,EAAA6J,cAAA,WACID,EAAA5J,EAAA6J,cAACqC,EAAA,EAAD,KACItC,EAAA5J,EAAA6J,cAACqC,EAAA,EAAOC,MAAR,CAAcC,MAAOC,IAAUC,MAC3B1C,EAAA5J,EAAA6J,cAACqC,EAAA,EAAOK,QAAR,0BACA3C,EAAA5J,EAAA6J,cAACqC,EAAA,EAAOM,QAAR,MACA5C,EAAA5J,EAAA6J,cAAClC,EAAA,EAAD,CAAQ7H,UAAU,cAAcwI,KAAK,OAAO5N,KAAK,YACjDkP,EAAA5J,EAAA6J,cAAClC,EAAA,EAAD,CAAQ7H,UAAU,cAAcwI,KAAK,WAAW5N,KAAK,UAEzDkP,EAAA5J,EAAA6J,cAACqC,EAAA,EAAOC,MAAR,CAAcC,MAAOC,IAAUI,OAC3B7C,EAAA5J,EAAA6J,cAAC6C,GAAD,CAAgBzM,IAAKjI,KAAKiU,QAASvM,OAAQ1H,SAGnD4R,EAAA5J,EAAA6J,cAAC8C,GAAD,CAAsB1M,IAAKjI,KAAKuS,mBAAoB7K,OAAQ1H,KAAM2S,UAAWT,YA1B3ED,aCGlB2C,IAASC,OACLjD,EAAA5J,EAAA6J,cAACiD,GAAD,MAAQC,SAASC,eAAe,SZoH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1U,KAAK,SAAA2U,GACjCA,EAAaC","file":"static/js/main.918b777c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\n","import {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport React from \"react\";\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId})\n        this.aceEditorRef.current.editor.setValue(value)\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQuery = () => {\n        this.enterLoading()\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n        const jobName = uuidv4()\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const auth = new Auth()\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        auth.userName((userName) => {\n\n            api.request(HTTP.Method.POST, {\n                sql: finalSQL,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true\n            }, (ok) => {\n                ok.json((wow) => {\n                    //render table\n                    try {\n                        self.getDisplay().update(wow)\n                        self.getMessageBoxAceEditor().setValue(\"\\nTime cost:\" + measureTime() + \"ms\")\n                    } catch (e) {\n                        self.getMessageBoxAceEditor().setValue(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow))\n                    }\n\n                }, (jsonErr) => {\n                    self.getMessageBoxAceEditor().setValue(jsonErr + \"\\nTime cost:\" + measureTime() + \"ms\")\n                })\n            }, (fail) => {\n                fail.value().content((str) => {\n                    self.getMessageBoxAceEditor().setValue(str + \"\\nTime cost:\" + measureTime() + \"ms\")\n                })\n\n            })\n        })\n\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = () => {\n        this.commandGroup.current.setState({loading: true});\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n    }\n\n\n    render() {\n        const self = this\n\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"300px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.parent = props.parent\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>运行</Button>\n                <Button onClick={this.parent.executeSave}>保存</Button>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.editor.current.text(scriptFile.content, node.id)\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.removeFile()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                        this.parent.setState({\n                            openCreateScriptDialog: true,\n                            nodeId: this.nodeId,\n                            isDir: true\n                        })\n                    }).bind(this)}/>\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: []}\n    }\n\n    update = (data) => {\n        // e.g. [{\"a\":1}]\n\n        let keys = []\n        let basket = {}\n        let rows = []\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    keys.push({\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    })\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    render() {\n        return (<div>\n            <Table columns={this.state.columns} dataSource={this.state.data}/>\n        </div>)\n    }\n\n}","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editor = React.createRef();\n        this.messageBox = React.createRef();\n        this.display = React.createRef();\n\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n        this.auth.userName((name) => {\n            this.setState({userName: name})\n        })\n\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n\n    render() {\n        if (this.state.isLogin) return <MLSQLQueryApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            })\n            this.app.updateLoginoutStatus()\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\"/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Jobs\"/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}