{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/query/MLSQLDash.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddTableForTeam.js","components/team/AddTableForRole.js","components/team/TeamTables.js","components/team/RoleTables.js","components/team/AddMemberForRole.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ClusterCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","skipAuth","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","res","text","get","catch","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","MLSQLAuth","apiResponse","removeItem","error","m","console","log","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","message","Error","InputGroup","Input","Group","ETLoadParams","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","etPopLoad","parent","state","inherits","react","compact","dataForRender","React","Option","Select","ETPopLoad","evt","data","target","getAttribute","sourceType","sourceTypeV","assertThisInitialized","runScript","concat","forEach","item","row","param","col","input","style","marginBottom","onChange","type","addonBefore","placeholder","description","loadParamsRef","current","setState","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","length","etpop","datasourcesRender","ETPopLoad_InputGroup","es_select","showSearch","width","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","label","ETLoadParams_ETLoadParams","ref","TextArea","ETPopAlgorithm","renderParam","rows","_this2","temp","ETPopAlgorithm_InputGroup","size","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","tableHidden","ETBaseTool_InputGroup","tableAlias","showOutputTableName","outputTableHidden","outputTableAlias","pathNameForRender","pathAlias","showPathName","pathHidden","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataType","dataTypeV","udfType","udfTypeV","code","newValue","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","editor","setValue","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","lib_default","a","mode","theme","height","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","span","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","createElement","href","appendChild","click","removeChild","ETStreamProgress","filter","jobType","map","ETStreamProgress_Option","ETPop","disableEtModalVisible","et","etPop","etModalVisible","enableEtModalVisible","popChild","renderContent","eventName","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","processType","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","title","Modal_default","visible","onCancel","onOk","okText","cancelText","Panel","Collapse","MLSQLETQuick","Tabs","TabPane","onDragStart","dataTransfer","setData","queryApp","appendToEditor","renderPop","ETPop_ETPop","popName","collapse","margin","padding","header","gutter","card","tag_default","tyle","help","draggable","color","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","ButtonToCommand","makeSQL","MLSQLAceEditor","scriptId","aceEditorRef","executeSave","api","BackendConfig","messageBox","getMessageBoxAceEditor","id","getAceEditor","getValue","executeQuery","enterLoading","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","getDisplay","update","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","p","getCursorPosition","insert","focus","getDashBoard","dash","display","commandGroup","loading","resourceProgressRef","enter","taskProgressRef","exit","etOver","getData","etRef","className","MLSQLETQuick_MLSQLETQuick","onDragOver","preventDefault","onDrop","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_ResourceProgress","MLSQLAceEditor_TaskProgress","CommandGroup","es_button","onClick","ResourceProgress","_this3","mark","setTimeout","intervalTimer","setInterval","resourceCompute","hasOwnProperty","jsonArray","percent","activeTasks","totalCores","successPercent","currentJobGroupActiveTasks","clearInterval","progress","TaskProgress","_this4","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isDir","isExpanded","toggleIsExpanded","scriptFile","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","finish","create","endsWith","msg","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","formGroup","helperText","labelFor","labelInfo","inputGroup","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","config","render","isPrototypeOf","substring","keys","basket","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","f","react_default","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender2","jsonItem","moment","utc","timestamp","toDate","y1","inputRowsPerSecond","y2","processedRowsPerSecond","numInputRows","titleMap","titleMap2","Charts","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","MLSQLDash_Panel","tabs","defaultActiveKey","MLSQLDash_TabPane","tab","UploadDropZone_UploadDropzone","PureComponent","MLSQLQueryApp","refresh","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","src_components_MLSQLAceEditor","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","CLUSTER_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","_this5","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","es_icon","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","AddTableForRole","roleTablesRef","fetchTables","fetchOperateTypes","renderTables","tables","renderOperateTypes","operateTypes","MLSQLAddTableForRole","RoleTables","onRoleSelect","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","operateType","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","RoleMembers","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleTables_RoleTables","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","backend","MLSQLAddExistClusterBackendToRole","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","switchToCluster","TeamCards_TeamCards","ClusterCards_ClusterCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43ac145b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    serverErrorCallback(str)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            serverErrorCallback(str)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        serverErrorCallback(str)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        evt.dataTransfer.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        evt.dataTransfer.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        evt.dataTransfer.setData(\"processType\", processType);\n        evt.dataTransfer.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        evt.dataTransfer.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        evt.dataTransfer.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        evt.dataTransfer.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        evt.dataTransfer.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        evt.dataTransfer.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\">Load data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\">Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\">TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\">Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.etRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId})\n        this.aceEditorRef.current.editor.setValue(value)\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        api.runScript({jobName: jobName, background: (this.state.background || false)}, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.getMessageBoxAceEditor().setValue(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.getMessageBoxAceEditor().setValue(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.getMessageBoxAceEditor().setValue(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n            self.exitLoading()\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n    }\n    etOver = (evt) => {\n        const eventName = evt.dataTransfer.getData(\"eventName\")\n        const popName = evt.dataTransfer.getData(\"popName\")\n        const processType = evt.dataTransfer.getData(\"processType\")\n        const pathAlias = evt.dataTransfer.getData(\"pathAlias\")\n        const tableHidden = evt.dataTransfer.getData(\"tableHidden\")\n        const pathHidden = evt.dataTransfer.getData(\"pathHidden\")\n        const outputTableHidden = evt.dataTransfer.getData(\"outputTableHidden\")\n        const outputTableAlias = evt.dataTransfer.getData(\"outputTableAlias\")\n        const tableAlias = evt.dataTransfer.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            this.etRef.current.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div>\n                    <MLSQLETQuick ref={this.etRef} parent={this}/>\n                </div>\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"300px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.parent = props.parent\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        if(self.resourceCompute===\"loading\"){\n                            return\n                        }\n                        self.resourceCompute=\"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            self.setState({\n                                percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                            })\n                            self.resourceCompute=\"loaded\"\n                        }, (str) => {\n                            self.resourceCompute=\"loaded\"\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if(self.taskCompute===\"loading\"){\n                            return\n                        }\n                        self.taskCompute=\"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute=\"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute=\"loaded\"\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.taskCompute=\"loaded\"\n        this.resourceCompute=\"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.editor.current.text(scriptFile.content, node.id)\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n    }\n\t\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n             {\n                 label: 'confirm',\n                 onClick: () => this.removeFile()\n             },\n             {\n                 label: 'cancel',\n                 onClick: () => {}\n             }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                        this.parent.setState({\n                            openCreateScriptDialog: true,\n                            nodeId: this.nodeId,\n                            isDir: true\n                        })\n                    }).bind(this)}/>\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\nimport Modal from \"../../node_modules/antd/lib/modal/Modal\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded\"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough.\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).toDate().getTime()\n            dataForRender.push({\n                x: x,\n                y1: jsonItem.inputRowsPerSecond,\n                y2: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                y1: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            titleMap: {y1: \"inputRowsPerSecond\", y2: \"processedRowsPerSecond\"},\n            dataForRender2: dataForRender2,\n            titleMap2: {y1: \"numInputRows\"}\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender}\n                titleMap={this.state.titleMap}\n            />\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender2}\n                titleMap={this.state.titleMap2}\n            />\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editor = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=\"200\" where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name} value={item.id}>{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.roleMembersRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForRole} from \"./AddTableForRole\";\nimport {RoleTables} from \"./RoleTables\";\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"] === params.tag) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Set your default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {CLUSTER_VIEW_BASIC, TEAM_VIEW_BASIC} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: TEAM_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n        this.auth.userName((name) => {\n            this.setState({userName: name})\n        })\n\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            } ,() => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}