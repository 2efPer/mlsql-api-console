{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/query/MLSQLDash.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/cluster/BackendForm.js","components/cluster/SetBackendTagsView.js","components/cluster/MainPage.js","components/cluster/ClusterApp.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","res","text","get","catch","USER_TAGS_UPDATE","USERS_URL","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","CLUSTER_MANAGER","FILE_UPLOAD","MLSQLAuth","apiResponse","removeItem","error","m","console","log","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","message","Error","InputGroup","Input","Group","ETLoadParams","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","etPopLoad","parent","state","inherits","react","compact","dataForRender","React","Option","Select","ETPopLoad","evt","data","target","getAttribute","sourceType","sourceTypeV","assertThisInitialized","runScript","concat","forEach","item","row","param","col","input","style","marginBottom","onChange","type","addonBefore","placeholder","description","loadParamsRef","current","setState","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","length","etpop","datasourcesRender","ETPopLoad_InputGroup","es_select","showSearch","width","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","label","ETLoadParams_ETLoadParams","ref","TextArea","ETPopAlgorithm","renderParam","rows","_this2","temp","ETPopAlgorithm_InputGroup","size","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","tableHidden","ETBaseTool_InputGroup","tableAlias","showOutputTableName","outputTableHidden","outputTableAlias","pathNameForRender","pathAlias","showPathName","pathHidden","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataType","dataTypeV","udfType","udfTypeV","code","newValue","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","editor","setValue","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","lib_default","a","mode","theme","height","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","span","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","createElement","href","appendChild","click","removeChild","ETStreamProgress","filter","jobType","map","ETStreamProgress_Option","ETPop","disableEtModalVisible","et","etPop","etModalVisible","enableEtModalVisible","popChild","renderContent","eventName","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","processType","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","title","Modal_default","visible","onCancel","onOk","okText","cancelText","Panel","Collapse","MLSQLETQuick","Tabs","TabPane","onDragStart","dataTransfer","setData","queryApp","appendToEditor","renderPop","ETPop_ETPop","popName","collapse","margin","padding","header","gutter","card","tag_default","tyle","help","draggable","color","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","ButtonToCommand","makeSQL","MLSQLAceEditor","scriptId","aceEditorRef","executeSave","api","BackendConfig","messageBox","getMessageBoxAceEditor","id","getAceEditor","getValue","executeQuery","enterLoading","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","getDisplay","update","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","p","getCursorPosition","insert","focus","getDashBoard","dash","display","commandGroup","loading","resourceProgressRef","enter","taskProgressRef","exit","etOver","getData","etRef","className","MLSQLETQuick_MLSQLETQuick","onDragOver","preventDefault","onDrop","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_ResourceProgress","MLSQLAceEditor_TaskProgress","CommandGroup","es_button","onClick","ResourceProgress","_this3","mark","setTimeout","intervalTimer","setInterval","resourceCompute","hasOwnProperty","jsonArray","percent","activeTasks","totalCores","successPercent","currentJobGroupActiveTasks","clearInterval","progress","TaskProgress","_this4","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isDir","isExpanded","toggleIsExpanded","scriptFile","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","finish","create","endsWith","msg","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","formGroup","helperText","labelFor","labelInfo","inputGroup","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","removeFile","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","config","render","isPrototypeOf","substring","keys","basket","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","f","react_default","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","generateColor","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender2","jsonItem","moment","utc","timestamp","toDate","y1","inputRowsPerSecond","y2","processedRowsPerSecond","numInputRows","titleMap","titleMap2","Charts","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","MLSQLDash_Panel","tabs","defaultActiveKey","MLSQLDash_TabPane","tab","UploadDropZone_UploadDropzone","PureComponent","MLSQLQueryApp","refresh","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","src_components_MLSQLAceEditor","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","VIEW_CLUSTER","VIEW_CONSOLE","VIEW_DEMO","CLUSTER_VIEW_BackendForm","CLUSTER_VIEW_BackendList","CLUSTER_VIEW_SetBackendTags","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","BackendForm","_submit","_this$state","tag","clusterMainPage","switchToBackendList","submit","validateForm","_this$state2","includes","Set","has","setName","setTag","setUrl","SetBackendTagsView","renderTags","SetBackendTagsView_Option","failStr","renderUsers","updateTag","setUser","updateUser","setDefaultBackend","users","mainPage","tagSelectRef","userSelectRef","Header","Layout","Content","Footer","Sider","MainPage","Menu","SubMenu","deleteBackend","loadBackends","activeTag","disabled","tableDisplayRef","operator","switchToBackendForm","currentView","switchToSetBackendTags","renderView","BackendForm_BackendForm","backendFormRef","SetBackendTagsView_SetBackendTagsView","setBackendTagsViewRef","renderViewIndex","onCollapse","collapsed","layout","minHeight","collapsible","es_menu","defaultSelectedKeys","Item","es_icon","breadcrumb","textAlign","ClusterApp","MainPage_MainPage","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","generateView","_this5","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","BigDL_BigDL","NLP_NLP","Basic_Basic","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","MainPage_Sider","block","MainPage_Header","MainPage_Content","Demos_Demos","MainPage_Footer","MLSQLDemoApp","demo_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","app","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","ClusterApp_ClusterApp","MLSQLDemoApp_MLSQLDemoApp","validateUserName","validatePassword","isEmail","test","normal","inject","openNotificationWithIcon","notification","App","menuRef","switchToCluster","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a62dc257.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    serverErrorCallback(str)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            serverErrorCallback(str)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        serverErrorCallback(str)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\"\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        evt.dataTransfer.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        evt.dataTransfer.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        evt.dataTransfer.setData(\"processType\", processType);\n        evt.dataTransfer.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        evt.dataTransfer.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        evt.dataTransfer.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        evt.dataTransfer.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        evt.dataTransfer.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        evt.dataTransfer.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\">Load data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\">Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\">TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\">Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.etRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId})\n        this.aceEditorRef.current.editor.setValue(value)\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        api.runScript({jobName: jobName, background: (this.state.background || false)}, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.getMessageBoxAceEditor().setValue(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.getMessageBoxAceEditor().setValue(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.getMessageBoxAceEditor().setValue(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n            self.exitLoading()\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n    }\n    etOver = (evt) => {\n        const eventName = evt.dataTransfer.getData(\"eventName\")\n        const popName = evt.dataTransfer.getData(\"popName\")\n        const processType = evt.dataTransfer.getData(\"processType\")\n        const pathAlias = evt.dataTransfer.getData(\"pathAlias\")\n        const tableHidden = evt.dataTransfer.getData(\"tableHidden\")\n        const pathHidden = evt.dataTransfer.getData(\"pathHidden\")\n        const outputTableHidden = evt.dataTransfer.getData(\"outputTableHidden\")\n        const outputTableAlias = evt.dataTransfer.getData(\"outputTableAlias\")\n        const tableAlias = evt.dataTransfer.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            this.etRef.current.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div>\n                    <MLSQLETQuick ref={this.etRef} parent={this}/>\n                </div>\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"300px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.parent = props.parent\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        if(self.resourceCompute===\"loading\"){\n                            return\n                        }\n                        self.resourceCompute=\"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            self.setState({\n                                percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                            })\n                            self.resourceCompute=\"loaded\"\n                        }, (str) => {\n                            self.resourceCompute=\"loaded\"\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if(self.taskCompute===\"loading\"){\n                            return\n                        }\n                        self.taskCompute=\"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute=\"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute=\"loaded\"\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.taskCompute=\"loaded\"\n        this.resourceCompute=\"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.editor.current.text(scriptFile.content, node.id)\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.removeFile()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                        this.parent.setState({\n                            openCreateScriptDialog: true,\n                            nodeId: this.nodeId,\n                            isDir: true\n                        })\n                    }).bind(this)}/>\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\nimport Modal from \"../../node_modules/antd/lib/modal/Modal\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded\"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough.\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).toDate().getTime()\n            dataForRender.push({\n                x: x,\n                y1: jsonItem.inputRowsPerSecond,\n                y2: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                y1: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            titleMap: {y1: \"inputRowsPerSecond\", y2: \"processedRowsPerSecond\"},\n            dataForRender2: dataForRender2,\n            titleMap2: {y1: \"numInputRows\"}\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender}\n                titleMap={this.state.titleMap}\n            />\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender2}\n                titleMap={this.state.titleMap2}\n            />\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editor = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n","import * as React from \"react\";\nimport {Button, FormGroup, InputGroup} from \"@blueprintjs/core\";\nimport './BackendForm.scss'\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER} from \"../../service/BackendConfig\";\n\n\nexport default class BackendForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {msg: \"\"}\n        this.clusterMainPage = props.parent\n    }\n\n    _submit = () => {\n        const {name, url, tag} = this.state\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const self = this\n        api.request2({\n            action: \"/backend/add\",\n            name: name,\n            tag: tag,\n            url: url\n        }, (json) => {\n            self.clusterMainPage.switchToBackendList()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n    }\n\n    submit = () => {\n        this.validateForm()\n    }\n\n    validateForm = () => {\n        const {name, url, tag} = this.state\n\n        if (!name || !url || !tag) {\n            this.setState({msg: `name, url ,tag should not empty`})\n            return\n        }\n\n        if (!url.includes(\":\")) {\n            this.setState({msg: `${url} should format like: ip/dns:port  `})\n            return\n        }\n\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            const nameSet = new Set(json.map(x => x.name))\n\n            if (nameSet.has(name)) {\n                this.setState({msg: `${name} exists`})\n                return\n            }\n\n            self._submit()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n\n    }\n\n    setName = (e) => {\n        this.setState({name: e.target.value})\n    }\n    setTag = (e) => {\n        this.setState({tag: e.target.value})\n    }\n    setUrl = (e) => {\n        this.setState({url: e.target.value})\n    }\n\n    render() {\n        return (<div>\n                <FormGroup\n                    helperText=\"name\"\n                    label=\"the name of backend\"\n                    labelFor=\"name\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"name\" onChange={this.setName} placeholder=\"name\"/>\n                </FormGroup>\n                <FormGroup\n                    helperText=\"multi tag please use comma separate\"\n                    label=\"tag\"\n                    labelFor=\"tag\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"tag\" onChange={this.setTag} placeholder=\"tag\"/>\n                </FormGroup>\n\n                <FormGroup\n                    helperText=\"address\"\n                    label=\"url\"\n                    labelFor=\"url\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"url\" onChange={this.setUrl} placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                </FormGroup>\n\n                <Button type=\"submit\" text=\"Add\" onClick={this.submit}/>\n                {this.state.msg !== \"\" && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Input, Button, Card, Select} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {USERS_URL, CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst gridStyle = {\n    width: '25%',\n    textAlign: 'center',\n};\n\nconst Option = Select.Option;\n\nexport default class SetBackendTagsView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.mainPage = props.parent\n        this.state = {tags: [], renderTags: [], renderUsers: []}\n        this.tagSelectRef = React.createRef()\n        this.userSelectRef = React.createRef()\n\n\n        const self = this\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            if (backendTags) {\n                console.log(backendTags.split(\",\"))\n                self.setState({tags: backendTags.split(\",\")})\n            }\n            self.renderTags()\n            self.renderUsers()\n        })\n    }\n\n    /**\n     * This function is written in Prague O(∩_∩)O~\n     * I'am happy and maybe this will reduce the bugs in\n     * this code snippet.\n     */\n    renderTags = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            json.forEach((item) => {\n                item[\"tag\"].split(\",\").forEach((tag) => {\n                    self.state.renderTags.push(<Option key={tag}>{tag}</Option>)\n                })\n\n            })\n        }, (failStr) => {\n            self.setState({msg: failStr})\n        })\n    }\n\n    renderUsers = () => {\n        const self = this\n        const api = new MLSQLAPI(USERS_URL)\n        api.request2({}, (json) => {\n            json.forEach((name) => {\n                self.state.renderUsers.push(<Option key={name}>{name}</Option>)\n\n            })\n        }, (failStr) => {\n            self.setState({msg: failStr})\n        })\n\n    }\n\n\n    setTag = (value) => {\n        this.setState({updateTag: value})\n    }\n\n    setUser = (value) => {\n        this.setState({updateUser: value})\n    }\n\n    setDefaultBackend = () => {\n        const self = this\n        const api = new MLSQLAPI(USER_TAGS_UPDATE)\n        const tag = (this.state.updateTag || []).join(\",\")\n        const users = (this.state.updateUser || []).join(\",\")\n        if (tag) {\n            api.request2({\n                backendTags: tag,\n                users: users\n            }, (json) => {\n                self.mainPage.switchToBackendList()\n            }, (failStr) => {\n                self.setState({msg: failStr})\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                Backend Tag:\n\n                <div style={{\"margin\": \"10px 0px\"}}><Select\n                    mode=\"multiple\"\n                    style={{width: '100%'}}\n                    placeholder=\"Please select\"\n                    onChange={this.setTag}\n                    ref={this.tagSelectRef}\n                >\n                    {this.state.renderTags}\n                </Select>\n                </div>\n                For Users:\n                <div style={{\"margin\": \"10px 0px\"}}><Select\n                    mode=\"multiple\"\n                    style={{width: '100%'}}\n                    placeholder=\"Please select\"\n                    onChange={this.setUser}\n                    ref={this.userSelectRef}\n                >\n                    {this.state.renderUsers}\n                </Select>\n                </div>\n\n                <Button type=\"primary\" onClick={() => {\n                    this.setDefaultBackend()\n                }}>Update</Button>\n                <div>\n\n                </div>\n                {this.state.msg && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {CLUSTER_VIEW_BackendForm, CLUSTER_VIEW_BackendList, CLUSTER_VIEW_SetBackendTags} from \"../../common/ViewConst\";\nimport BackendForm from \"./BackendForm\";\nimport SetBackendTagsView from \"./SetBackendTagsView\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\nconst SubMenu = Menu.SubMenu;\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collapsed: false,\n            currentView: CLUSTER_VIEW_BackendList\n        };\n        this.tableDisplayRef = React.createRef()\n        this.backendFormRef = React.createRef()\n        this.setBackendTagsViewRef = React.createRef()\n    }\n\n\n    deleteBackend = (id) => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            id: id,\n            action: \"/backend/remove\"\n        }, (json) => {\n            self.switchToBackendList()\n        }, (str) => {\n\n        })\n    }\n\n    loadBackends = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            api.request2({\n                action: \"/backend/list\"\n            }, (json) => {\n\n                json.forEach((item) => {\n                    let activeTag = \"\"\n                    if (backendTags == item[\"tag\"]) {\n                        activeTag = <Button disabled={true} style={{color: \"green\"}}\n                                            type=\"primary\">Active</Button>\n                    }\n                    item[\"status\"] = activeTag\n                    item[\"operator\"] = <div>\n                        <Button type=\"danger\" onClick={() => {\n                            self.deleteBackend(item[\"id\"])\n                        }}>delete</Button>\n                    </div>\n                    delete item[\"tags\"]\n\n                })\n                self.tableDisplayRef.current.update(json, {\n                    render: {\n                        operator: (value) => {\n                            return <span>{value}</span>\n                        },\n                        status: (value) => {\n                            return <span>{value}</span>\n                        }\n                    }\n                })\n            }, (str) => {\n\n            })\n\n        })\n\n\n    }\n\n\n    switchToBackendForm = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendForm})\n    }\n\n    switchToBackendList = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendList})\n        this.loadBackends()\n    }\n\n    switchToSetBackendTags = () => {\n        this.setState({currentView: CLUSTER_VIEW_SetBackendTags})\n    }\n\n    renderView = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            this.loadBackends()\n            return <MLSQLQueryDisplay ref={this.tableDisplayRef} parent={this}/>\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return <BackendForm ref={this.backendFormRef} parent={this}/>\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return <SetBackendTagsView ref={this.setBackendTagsViewRef} parent={this}/>\n        }\n    }\n\n    renderViewIndex = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            return '1'\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return '2'\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return '3'\n        }\n        return '1'\n    }\n\n\n    onCollapse = (collapsed) => {\n        this.setState({collapsed});\n    }\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    onCollapse={this.onCollapse}\n                >\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[this.renderViewIndex()]} mode=\"inline\">\n                        <Menu.Item key=\"1\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendList}>List Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendForm}>Add Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}}\n                                     onClick={this.switchToSetBackendTags}>Set Console Backend</a></span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <Breadcrumb style={{margin: '16px 0'}}>\n                            <Breadcrumb.Item></Breadcrumb.Item>\n                        </Breadcrumb>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from './MainPage'\n\nexport class ClusterApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.getEditor().setValue(this.commandData[0], -1)\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            this.getEditor().setValue(this.commandData[current], -1)\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            this.getEditor().setValue(this.commandData[current], -1)\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=\"200\" where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO} from \"../common/ViewConst\";\nimport {ClusterApp} from \"../components/cluster/ClusterApp\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n        this.auth.userName((name) => {\n            this.setState({userName: name})\n        })\n\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.state.isLogin && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.state.isLogin && this.currentView() === VIEW_CLUSTER) return <ClusterApp/>\n        if (this.state.isLogin && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n            return (\n                <div className=\"mlsql-register\">\n                    <div className=\"mlsql-register-form\">\n                        <FormGroup\n                            helperText=\"email\"\n                            label=\"userName\"\n                            labelFor=\"userName\"\n                            labelInfo=\"(required)\">\n                            <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                        </FormGroup>\n                        <FormGroup\n                            helperText=\"password\"\n                            label=\"password\"\n                            labelFor=\"password\"\n                            labelInfo=\"(required)\">\n                            <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                        </FormGroup>\n\n                        <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                                onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                        {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                    </div>\n\n                </div>\n            )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            })\n            this.app.updateLoginoutStatus()\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToCluster = () => {\n        const auth = new MLSQLAuth()\n        const self = this\n        auth.user((user) => {\n            console.log(user[\"role\"])\n            if (user[\"role\"] == \"admin\") {\n                self.setState({currentView: VIEW_CLUSTER})\n            } else {\n                openNotificationWithIcon(\"error\", \"Auth Fail\", \"You are not allow to visit Cluster Manager\")\n            }\n        })\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Cluster\" onClick={this.switchToCluster}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\" href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\" ><img src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}