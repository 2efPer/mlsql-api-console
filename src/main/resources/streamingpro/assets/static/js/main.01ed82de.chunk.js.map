{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/query/MLSQLDash.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/cluster/BackendForm.js","components/cluster/SetBackendTagsView.js","components/cluster/MainPage.js","components/cluster/ClusterApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","res","text","get","catch","USER_TAGS_UPDATE","USERS_URL","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","CLUSTER_MANAGER","FILE_UPLOAD","MLSQLAuth","apiResponse","removeItem","error","m","console","log","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","serverError","assert","condition","message","Error","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","executeQueryBackGround","executeQuery","enterLoading","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","runScript","queryApp","setData","getDisplay","update","stringify","selectionRange","getSelectionRange","session","getTextRange","getDashBoard","dash","display","commandGroup","loading","resourceProgressRef","enter","taskProgressRef","exit","parent","React","newValue","react","className","lib_default","a","ref","mode","theme","width","height","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_ResourceProgress","MLSQLAceEditor_TaskProgress","CommandGroup","_this2","es_button","onClick","ResourceProgress","_this3","mark","setTimeout","intervalTimer","setInterval","hasOwnProperty","concat","jsonArray","percent","activeTasks","totalCores","successPercent","currentJobGroupActiveTasks","title","clearInterval","progress","TaskProgress","_this4","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","item","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","length","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","preventDefault","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isDir","isExpanded","toggleIsExpanded","scriptFile","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","target","finish","create","endsWith","msg","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","style","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","removeFile","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","deleteMenu","menu","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","table","dataSource","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","onDrop","files","req","post","set","file","attach","path","end","map","f","react_default","createElement","size","es","getDataTransferItems","evt","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","Panel","Collapse","TabPane","Tabs","MLSQLDash","_Component","isStream","renderDash","Charts","dataForRender","titleMap","dataForRender2","titleMap2","renderStream","jsonItem","x","moment","utc","timestamp","toDate","y1","inputRowsPerSecond","y2","processedRowsPerSecond","numInputRows","renderRawData","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","MLSQLQueryApp","refresh","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","src_components_MLSQLAceEditor","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","VIEW_CLUSTER","VIEW_CONSOLE","CLUSTER_VIEW_BackendForm","CLUSTER_VIEW_BackendList","CLUSTER_VIEW_SetBackendTags","BackendForm","_submit","_this$state","tag","action","clusterMainPage","switchToBackendList","submit","validateForm","_this$state2","includes","Set","has","setName","setTag","setUrl","Option","Select","SetBackendTagsView","renderTags","split","failStr","renderUsers","updateTag","setUser","updateUser","setDefaultBackend","users","mainPage","tagSelectRef","userSelectRef","margin","es_select","Header","Layout","Content","Footer","Sider","MainPage","Menu","SubMenu","deleteBackend","loadBackends","activeTag","disabled","tableDisplayRef","operator","switchToBackendForm","currentView","switchToSetBackendTags","renderView","BackendForm_BackendForm","backendFormRef","SetBackendTagsView_SetBackendTagsView","setBackendTagsViewRef","renderViewIndex","onCollapse","collapsed","layout","minHeight","collapsible","es_menu","defaultSelectedKeys","Item","padding","breadcrumb","textAlign","ClusterApp","MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","app","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","ClusterApp_ClusterApp","validateUserName","validatePassword","isEmail","test","normal","openNotificationWithIcon","description","notification","App","menuRef","switchToCluster","switchToConsole","switchToCnDoc","open","navbar","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01ed82de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    serverErrorCallback(str)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                ok.json((wow) => {\n                    successCallback(wow)\n                }, (jsonErr) => {\n                    serverErrorCallback(jsonErr)\n                })\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        serverErrorCallback(str)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\"\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n","import {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport React from \"react\";\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\nimport {assert} from \"../common/tool\"\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId})\n        this.aceEditorRef.current.editor.setValue(value)\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQueryBackGround = () => {\n        this.setState({background: true})\n        this.executeQuery()\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        api.runScript({jobName: jobName, background: (this.state.background || false)}, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.getMessageBoxAceEditor().setValue(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.getMessageBoxAceEditor().setValue(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            self.getMessageBoxAceEditor().setValue(fail + \"\\nTime cost:\" + measureTime() + \"ms\")\n            self.exitLoading()\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n    }\n\n\n    render() {\n        const self = this\n\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"300px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.parent = props.parent\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            self.setState({\n                                percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                            })\n                        }, (str) => {\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n                    , 2000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 2000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.editor.current.text(scriptFile.content, node.id)\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.removeFile()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                        this.parent.setState({\n                            openCreateScriptDialog: true,\n                            nodeId: this.nodeId,\n                            isDir: true\n                        })\n                    }).bind(this)}/>\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: []}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        if (React.Component.isPrototypeOf(value.type)) {\n            keyColumn[\"render\"] = value => <span>{value}</span>\n            return\n        }\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    render() {\n        return (<div>\n            <Table columns={this.state.columns} dataSource={this.state.data}/>\n        </div>)\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded\"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough.\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {Component} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {TimelineChart} from 'ant-design-pro/lib/Charts';\nimport {Tabs} from 'antd';\nimport moment from 'moment'\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends Component {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n    isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    renderDash = () => {\n        const data = this.state.data\n        if (!this.isStream(data)) {\n            return <div></div>\n        }\n        return <div>\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender}\n                titleMap={this.state.titleMap}\n            />\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender2}\n                titleMap={this.state.titleMap2}\n            />\n        </div>\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n            this.renderStream()\n        } catch (e) {\n\n        }\n\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        if (!this.isStream(data)) {\n            return\n        }\n\n        const dataForRender = []\n        const dataForRender2 = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push({\n                x: moment.utc(jsonItem.timestamp).toDate().getTime(),\n                y1: jsonItem.inputRowsPerSecond,\n                y2: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: moment.utc(jsonItem.timestamp).toDate().getTime(),\n                y1: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            titleMap: {y1: \"inputRowsPerSecond\", y2: \"processedRowsPerSecond\"},\n            dataForRender2: dataForRender2,\n            titleMap2: {y1: \"numInputRows\"}\n        })\n    }\n    renderRawData = () => {\n        const data = this.state.data\n        if (!this.isStream(data)) {\n            return \"\"\n        }\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\"><pre>{this.renderRawData()}</pre></TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editor = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"","import * as React from \"react\";\nimport {Button, FormGroup, InputGroup} from \"@blueprintjs/core\";\nimport './BackendForm.scss'\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER} from \"../../service/BackendConfig\";\n\n\nexport default class BackendForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {msg: \"\"}\n        this.clusterMainPage = props.parent\n    }\n\n    _submit = () => {\n        const {name, url, tag} = this.state\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const self = this\n        api.request2({\n            action: \"/backend/add\",\n            name: name,\n            tag: tag,\n            url: url\n        }, (json) => {\n            self.clusterMainPage.switchToBackendList()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n    }\n\n    submit = () => {\n        this.validateForm()\n    }\n\n    validateForm = () => {\n        const {name, url, tag} = this.state\n\n        if (!name || !url || !tag) {\n            this.setState({msg: `name, url ,tag should not empty`})\n            return\n        }\n\n        if (!url.includes(\":\")) {\n            this.setState({msg: `${url} should format like: ip/dns:port  `})\n            return\n        }\n\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            const nameSet = new Set(json.map(x => x.name))\n\n            if (nameSet.has(name)) {\n                this.setState({msg: `${name} exists`})\n                return\n            }\n\n            self._submit()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n\n    }\n\n    setName = (e) => {\n        this.setState({name: e.target.value})\n    }\n    setTag = (e) => {\n        this.setState({tag: e.target.value})\n    }\n    setUrl = (e) => {\n        this.setState({url: e.target.value})\n    }\n\n    render() {\n        return (<div>\n                <FormGroup\n                    helperText=\"name\"\n                    label=\"the name of backend\"\n                    labelFor=\"name\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"name\" onChange={this.setName} placeholder=\"name\"/>\n                </FormGroup>\n                <FormGroup\n                    helperText=\"multi tag please use comma separate\"\n                    label=\"tag\"\n                    labelFor=\"tag\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"tag\" onChange={this.setTag} placeholder=\"tag\"/>\n                </FormGroup>\n\n                <FormGroup\n                    helperText=\"address\"\n                    label=\"url\"\n                    labelFor=\"url\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"url\" onChange={this.setUrl} placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                </FormGroup>\n\n                <Button type=\"submit\" text=\"Add\" onClick={this.submit}/>\n                {this.state.msg !== \"\" && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Input, Button, Card, Select} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {USERS_URL, CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst gridStyle = {\n    width: '25%',\n    textAlign: 'center',\n};\n\nconst Option = Select.Option;\n\nexport default class SetBackendTagsView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.mainPage = props.parent\n        this.state = {tags: [], renderTags: [], renderUsers: []}\n        this.tagSelectRef = React.createRef()\n        this.userSelectRef = React.createRef()\n\n\n        const self = this\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            if (backendTags) {\n                console.log(backendTags.split(\",\"))\n                self.setState({tags: backendTags.split(\",\")})\n            }\n            self.renderTags()\n            self.renderUsers()\n        })\n    }\n\n    /**\n     * This function is written in Prague O(∩_∩)O~\n     * I'am happy and maybe this will reduce the bugs in\n     * this code snippet.\n     */\n    renderTags = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            json.forEach((item) => {\n                item[\"tag\"].split(\",\").forEach((tag) => {\n                    self.state.renderTags.push(<Option key={tag}>{tag}</Option>)\n                })\n\n            })\n        }, (failStr) => {\n            self.setState({msg: failStr})\n        })\n    }\n\n    renderUsers = () => {\n        const self = this\n        const api = new MLSQLAPI(USERS_URL)\n        api.request2({}, (json) => {\n            json.forEach((name) => {\n                self.state.renderUsers.push(<Option key={name}>{name}</Option>)\n\n            })\n        }, (failStr) => {\n            self.setState({msg: failStr})\n        })\n\n    }\n\n\n    setTag = (value) => {\n        this.setState({updateTag: value})\n    }\n\n    setUser = (value) => {\n        this.setState({updateUser: value})\n    }\n\n    setDefaultBackend = () => {\n        const self = this\n        const api = new MLSQLAPI(USER_TAGS_UPDATE)\n        const tag = (this.state.updateTag || []).join(\",\")\n        const users = (this.state.updateUser || []).join(\",\")\n        if (tag) {\n            api.request2({\n                backendTags: tag,\n                users: users\n            }, (json) => {\n                self.mainPage.switchToBackendList()\n            }, (failStr) => {\n                self.setState({msg: failStr})\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                Backend Tag:\n\n                <div style={{\"margin\": \"10px 0px\"}}><Select\n                    mode=\"multiple\"\n                    style={{width: '100%'}}\n                    placeholder=\"Please select\"\n                    onChange={this.setTag}\n                    ref={this.tagSelectRef}\n                >\n                    {this.state.renderTags}\n                </Select>\n                </div>\n                For Users:\n                <div style={{\"margin\": \"10px 0px\"}}><Select\n                    mode=\"multiple\"\n                    style={{width: '100%'}}\n                    placeholder=\"Please select\"\n                    onChange={this.setUser}\n                    ref={this.userSelectRef}\n                >\n                    {this.state.renderUsers}\n                </Select>\n                </div>\n\n                <Button type=\"primary\" onClick={() => {\n                    this.setDefaultBackend()\n                }}>Update</Button>\n                <div>\n\n                </div>\n                {this.state.msg && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {CLUSTER_VIEW_BackendForm, CLUSTER_VIEW_BackendList, CLUSTER_VIEW_SetBackendTags} from \"../../common/ViewConst\";\nimport BackendForm from \"./BackendForm\";\nimport SetBackendTagsView from \"./SetBackendTagsView\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\nconst SubMenu = Menu.SubMenu;\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collapsed: false,\n            currentView: CLUSTER_VIEW_BackendList\n        };\n        this.tableDisplayRef = React.createRef()\n        this.backendFormRef = React.createRef()\n        this.setBackendTagsViewRef = React.createRef()\n    }\n\n\n    deleteBackend = (id) => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            id: id,\n            action: \"/backend/remove\"\n        }, (json) => {\n            self.switchToBackendList()\n        }, (str) => {\n\n        })\n    }\n\n    loadBackends = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            api.request2({\n                action: \"/backend/list\"\n            }, (json) => {\n\n                json.forEach((item) => {\n                    let activeTag = \"\"\n                    if (backendTags == item[\"tag\"]) {\n                        activeTag = <Button disabled={true} style={{color: \"green\"}}\n                                            type=\"primary\">Active</Button>\n                    }\n                    item[\"status\"] = activeTag\n                    item[\"operator\"] = <div>\n                        <Button type=\"danger\" onClick={() => {\n                            self.deleteBackend(item[\"id\"])\n                        }}>delete</Button>\n                    </div>\n                    delete item[\"tags\"]\n\n                })\n                self.tableDisplayRef.current.update(json, {\n                    render: {\n                        operator: (value) => {\n                            return <span>{value}</span>\n                        },\n                        status: (value) => {\n                            return <span>{value}</span>\n                        }\n                    }\n                })\n            }, (str) => {\n\n            })\n\n        })\n\n\n    }\n\n\n    switchToBackendForm = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendForm})\n    }\n\n    switchToBackendList = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendList})\n        this.loadBackends()\n    }\n\n    switchToSetBackendTags = () => {\n        this.setState({currentView: CLUSTER_VIEW_SetBackendTags})\n    }\n\n    renderView = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            this.loadBackends()\n            return <MLSQLQueryDisplay ref={this.tableDisplayRef} parent={this}/>\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return <BackendForm ref={this.backendFormRef} parent={this}/>\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return <SetBackendTagsView ref={this.setBackendTagsViewRef} parent={this}/>\n        }\n    }\n\n    renderViewIndex = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            return '1'\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return '2'\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return '3'\n        }\n        return '1'\n    }\n\n\n    onCollapse = (collapsed) => {\n        this.setState({collapsed});\n    }\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    onCollapse={this.onCollapse}\n                >\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[this.renderViewIndex()]} mode=\"inline\">\n                        <Menu.Item key=\"1\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendList}>List Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendForm}>Add Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}}\n                                     onClick={this.switchToSetBackendTags}>Set Console Backend</a></span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <Breadcrumb style={{margin: '16px 0'}}>\n                            <Breadcrumb.Item></Breadcrumb.Item>\n                        </Breadcrumb>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from './MainPage'\n\nexport class ClusterApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE} from \"../common/ViewConst\";\nimport {ClusterApp} from \"../components/cluster/ClusterApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n        this.auth.userName((name) => {\n            this.setState({userName: name})\n        })\n\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.state.isLogin && this.currentView() == VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.state.isLogin && this.currentView() == VIEW_CLUSTER) return <ClusterApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            })\n            this.app.updateLoginoutStatus()\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToCluster = () => {\n        const auth = new MLSQLAuth()\n        const self = this\n        auth.user((user) => {\n            console.log(user[\"role\"])\n            if (user[\"role\"] == \"admin\") {\n                self.setState({currentView: VIEW_CLUSTER})\n            } else {\n                openNotificationWithIcon(\"error\", \"Auth Fail\", \"You are not allow to visit Cluster Manager\")\n            }\n        })\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Cluster\" onClick={this.switchToCluster}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}