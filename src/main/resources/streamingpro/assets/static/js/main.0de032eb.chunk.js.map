{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/cluster/BackendForm.js","components/cluster/SetBackendTagsView.js","components/cluster/MainPage.js","components/cluster/ClusterApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","res","text","get","catch","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","CLUSTER_MANAGER","MLSQLAuth","apiResponse","removeItem","error","m","console","log","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","serverError","assert","condition","message","Error","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","executeQueryBackGround","executeQuery","enterLoading","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","runScript","getDisplay","update","stringify","selectionRange","getSelectionRange","session","getTextRange","queryApp","display","commandGroup","loading","resourceProgressRef","enter","taskProgressRef","exit","parent","React","newValue","react","className","lib_default","a","ref","mode","theme","width","height","onChange","name","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_ResourceProgress","MLSQLAceEditor_TaskProgress","CommandGroup","_this2","es_button","onClick","ResourceProgress","_this3","mark","setTimeout","intervalTimer","setInterval","hasOwnProperty","concat","jsonArray","percent","activeTasks","totalCores","successPercent","currentJobGroupActiveTasks","title","clearInterval","progress","TaskProgress","_this4","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","item","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","length","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","preventDefault","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isDir","isExpanded","toggleIsExpanded","scriptFile","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","target","finish","create","endsWith","msg","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","style","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","removeFile","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","deleteMenu","menu","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","table","dataSource","MLSQLQueryApp","sqlContent","createRef","react_default","createElement","MLSQLTreeNode_ScriptNodeTree","src_components_MLSQLAceEditor","MLSQLQueryDisplay_MLSQLQueryDisplay","Component","VIEW_CLUSTER","VIEW_CONSOLE","CLUSTER_VIEW_BackendForm","CLUSTER_VIEW_BackendList","CLUSTER_VIEW_SetBackendTags","BackendForm","_submit","_this$state","tag","action","clusterMainPage","switchToBackendList","submit","validateForm","_this$state2","includes","Set","map","x","has","setName","setTag","setUrl","SetBackendTagsView","renderTags","tagsArray","split","card","updateTag","setDefaultBackend","mainPage","switchToSetBackendTags","input","margin","Header","Layout","Content","Footer","Sider","MainPage","Menu","SubMenu","deleteBackend","loadBackends","activeTag","disabled","tableDisplayRef","operator","switchToBackendForm","currentView","renderView","BackendForm_BackendForm","backendFormRef","SetBackendTagsView_SetBackendTagsView","setBackendTagsViewRef","renderViewIndex","onCollapse","collapsed","layout","minHeight","collapsible","es_menu","defaultSelectedKeys","Item","padding","breadcrumb","textAlign","ClusterApp","MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","app","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","ClusterApp_ClusterApp","validateUserName","validatePassword","isEmail","test","normal","openNotificationWithIcon","description","notification","App","menuRef","switchToCluster","switchToConsole","navbar","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0de032eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    serverErrorCallback(str)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                ok.json((wow) => {\n                    successCallback(wow)\n                }, (jsonErr) => {\n                    serverErrorCallback(jsonErr)\n                })\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        serverErrorCallback(str)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\n","import {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport React from \"react\";\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\nimport {assert} from \"../common/tool\"\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId})\n        this.aceEditorRef.current.editor.setValue(value)\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQueryBackGround = () => {\n        this.setState({background: true})\n        this.executeQuery()\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        api.runScript({jobName: jobName, background: (this.state.background || false)}, finalSQL, (wow) => {\n            try {\n                self.getDisplay().update(wow)\n                self.getMessageBoxAceEditor().setValue(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                self.getMessageBoxAceEditor().setValue(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            self.getMessageBoxAceEditor().setValue(fail + \"\\nTime cost:\" + measureTime() + \"ms\")\n            self.exitLoading()\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n    }\n\n\n    render() {\n        const self = this\n\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"300px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.parent = props.parent\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            self.setState({\n                                percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                            })\n                        }, (str) => {\n                            self.parent.getMessageBoxAceEditor().setValue(str)\n                        })\n\n                    }\n                    , 2000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.parent.getMessageBoxAceEditor().setValue(str)\n                        })\n\n                    }\n                    , 2000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.editor.current.text(scriptFile.content, node.id)\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.removeFile()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                        this.parent.setState({\n                            openCreateScriptDialog: true,\n                            nodeId: this.nodeId,\n                            isDir: true\n                        })\n                    }).bind(this)}/>\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: []}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        if (React.Component.isPrototypeOf(value.type)) {\n            keyColumn[\"render\"] = value => <span>{value}</span>\n            return\n        }\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    render() {\n        return (<div>\n            <Table columns={this.state.columns} dataSource={this.state.data}/>\n        </div>)\n    }\n\n}","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editor = React.createRef();\n        this.messageBox = React.createRef();\n        this.display = React.createRef();\n\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"","import * as React from \"react\";\nimport {Button, FormGroup, InputGroup} from \"@blueprintjs/core\";\nimport './BackendForm.scss'\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER} from \"../../service/BackendConfig\";\n\n\nexport default class BackendForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {msg: \"\"}\n        this.clusterMainPage = props.parent\n    }\n\n    _submit = () => {\n        const {name, url, tag} = this.state\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const self = this\n        api.request2({\n            action: \"/backend/add\",\n            name: name,\n            tag: tag,\n            url: url\n        }, (json) => {\n            self.clusterMainPage.switchToBackendList()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n    }\n\n    submit = () => {\n        this.validateForm()\n    }\n\n    validateForm = () => {\n        const {name, url, tag} = this.state\n\n        if (!name || !url || !tag) {\n            this.setState({msg: `name, url ,tag should not empty`})\n            return\n        }\n\n        if (!url.includes(\":\")) {\n            this.setState({msg: `${url} should format like: ip/dns:port  `})\n            return\n        }\n\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            const nameSet = new Set(json.map(x => x.name))\n\n            if (nameSet.has(name)) {\n                this.setState({msg: `${name} exists`})\n                return\n            }\n\n            self._submit()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n\n    }\n\n    setName = (e) => {\n        this.setState({name: e.target.value})\n    }\n    setTag = (e) => {\n        this.setState({tag: e.target.value})\n    }\n    setUrl = (e) => {\n        this.setState({url: e.target.value})\n    }\n\n    render() {\n        return (<div>\n                <FormGroup\n                    helperText=\"name\"\n                    label=\"the name of backend\"\n                    labelFor=\"name\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"name\" onChange={this.setName} placeholder=\"name\"/>\n                </FormGroup>\n                <FormGroup\n                    helperText=\"multi tag please use comma separate\"\n                    label=\"tag\"\n                    labelFor=\"tag\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"tag\" onChange={this.setTag} placeholder=\"tag\"/>\n                </FormGroup>\n\n                <FormGroup\n                    helperText=\"address\"\n                    label=\"url\"\n                    labelFor=\"url\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"url\" onChange={this.setUrl} placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                </FormGroup>\n\n                <Button type=\"submit\" text=\"Add\" onClick={this.submit}/>\n                {this.state.msg !== \"\" && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Input, Button, Card} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst gridStyle = {\n    width: '25%',\n    textAlign: 'center',\n};\n\nexport default class SetBackendTagsView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.mainPage = props.parent\n        this.state = {\"tags\": \"\"}\n\n        const self = this\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            self.setState({tags: backendTags})\n        })\n    }\n\n\n    tags = () => {\n        const self = this\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            self.setState({tags: backendTags})\n        })\n    }\n\n    renderTags = () => {\n        const tagsArray = []\n        this.state.tags.split(\",\").forEach((item) => {\n            tagsArray.push(<Card title={item}/>)\n        })\n        return tagsArray\n    }\n\n    setTag = (e) => {\n        this.setState({updateTag: e.target.value})\n    }\n\n    setDefaultBackend = () => {\n        const self = this\n        const api = new MLSQLAPI(USER_TAGS_UPDATE)\n        const tag = this.state.updateTag\n        if (tag) {\n            api.request2({\n                backendTags: tag\n            }, (json) => {\n                self.mainPage.switchToSetBackendTags()\n            }, (str) => {\n\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                New Tag:<Input\n                placeholder=\"input tags\"\n                style={{width: 200, margin: \"10px 10px\"}}\n                onChange={this.setTag}\n            />\n                <Button type=\"primary\" onClick={() => {\n                    this.setDefaultBackend()\n                }}>Update</Button>\n\n                <div style={{display: \"flex\"}}>{this.renderTags()}</div>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {CLUSTER_VIEW_BackendForm, CLUSTER_VIEW_BackendList, CLUSTER_VIEW_SetBackendTags} from \"../../common/ViewConst\";\nimport BackendForm from \"./BackendForm\";\nimport SetBackendTagsView from \"./SetBackendTagsView\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\nconst SubMenu = Menu.SubMenu;\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collapsed: false,\n            currentView: CLUSTER_VIEW_BackendList\n        };\n        this.tableDisplayRef = React.createRef()\n        this.backendFormRef = React.createRef()\n        this.setBackendTagsViewRef = React.createRef()\n    }\n\n\n    deleteBackend = (id) => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            id: id\n        }, (json) => {\n            self.switchToBackendList()\n        }, (str) => {\n\n        })\n    }\n\n    loadBackends = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            api.request2({\n                action: \"/backend/list\"\n            }, (json) => {\n\n                json.forEach((item) => {\n                    let activeTag = \"\"\n                    if (backendTags == item[\"tag\"]) {\n                        activeTag = <Button disabled={true} style={{color: \"green\"}}\n                                            type=\"primary\">Active</Button>\n                    }\n                    item[\"status\"] = activeTag\n                    item[\"operator\"] = <div>\n                        <Button type=\"danger\" onClick={() => {\n                            self.deleteBackend(item[\"id\"])\n                        }}>delete</Button>\n                    </div>\n                    delete item[\"tags\"]\n\n                })\n                self.tableDisplayRef.current.update(json, {\n                    render: {\n                        operator: (value) => {\n                            return <span>{value}</span>\n                        },\n                        status: (value) => {\n                            return <span>{value}</span>\n                        }\n                    }\n                })\n            }, (str) => {\n\n            })\n\n        })\n\n\n    }\n\n\n    switchToBackendForm = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendForm})\n    }\n\n    switchToBackendList = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendList})\n        this.loadBackends()\n    }\n\n    switchToSetBackendTags = () => {\n        this.setState({currentView: CLUSTER_VIEW_SetBackendTags})\n    }\n\n    renderView = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            this.loadBackends()\n            return <MLSQLQueryDisplay ref={this.tableDisplayRef} parent={this}/>\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return <BackendForm ref={this.backendFormRef} parent={this}/>\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return <SetBackendTagsView ref={this.setBackendTagsViewRef} parent={this}/>\n        }\n    }\n\n    renderViewIndex = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            return '1'\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return '2'\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return '3'\n        }\n        return '1'\n    }\n\n\n    onCollapse = (collapsed) => {\n        this.setState({collapsed});\n    }\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    onCollapse={this.onCollapse}\n                >\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[this.renderViewIndex()]} mode=\"inline\">\n                        <Menu.Item key=\"1\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendList}>List Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendForm}>Add Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}}\n                                     onClick={this.switchToSetBackendTags}>Set Console Backend</a></span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <Breadcrumb style={{margin: '16px 0'}}>\n                            <Breadcrumb.Item></Breadcrumb.Item>\n                        </Breadcrumb>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from './MainPage'\n\nexport class ClusterApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE} from \"../common/ViewConst\";\nimport {ClusterApp} from \"../components/cluster/ClusterApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n        this.auth.userName((name) => {\n            this.setState({userName: name})\n        })\n\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.state.isLogin && this.currentView() == VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.state.isLogin && this.currentView() == VIEW_CLUSTER) return <ClusterApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            })\n            this.app.updateLoginoutStatus()\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToCluster = () => {\n        const auth = new MLSQLAuth()\n        const self = this\n        auth.user((user) => {\n            console.log(user[\"role\"])\n            if (user[\"role\"] == \"admin\") {\n                self.setState({currentView: VIEW_CLUSTER})\n            } else {\n                openNotificationWithIcon(\"error\", \"Auth Fail\", \"You are not allow to visit Cluster Manager\")\n            }\n        })\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Cluster\" onClick={this.switchToCluster}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}