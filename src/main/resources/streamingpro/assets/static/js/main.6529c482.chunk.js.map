{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/query/MLSQLDash.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/cluster/BackendForm.js","components/cluster/SetBackendTagsView.js","components/cluster/MainPage.js","components/cluster/ClusterApp.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddTableForTeam.js","components/team/AddTableForRole.js","components/team/TeamTables.js","components/team/RoleTables.js","components/team/TeamCards.js","components/cluster/ClusterCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","res","text","get","catch","USER_TAGS_UPDATE","USERS_URL","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","CLUSTER_MANAGER","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","MLSQLAuth","apiResponse","removeItem","error","m","console","log","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","message","Error","InputGroup","Input","Group","ETLoadParams","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","etPopLoad","parent","state","inherits","react","compact","dataForRender","React","Option","Select","ETPopLoad","evt","data","target","getAttribute","sourceType","sourceTypeV","assertThisInitialized","runScript","concat","forEach","item","row","param","col","input","style","marginBottom","onChange","type","addonBefore","placeholder","description","loadParamsRef","current","setState","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","length","etpop","datasourcesRender","ETPopLoad_InputGroup","es_select","showSearch","width","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","label","ETLoadParams_ETLoadParams","ref","TextArea","ETPopAlgorithm","renderParam","rows","_this2","temp","ETPopAlgorithm_InputGroup","size","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","tableHidden","ETBaseTool_InputGroup","tableAlias","showOutputTableName","outputTableHidden","outputTableAlias","pathNameForRender","pathAlias","showPathName","pathHidden","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataType","dataTypeV","udfType","udfTypeV","code","newValue","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","editor","setValue","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","lib_default","a","mode","theme","height","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","span","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","createElement","href","appendChild","click","removeChild","ETStreamProgress","filter","jobType","map","ETStreamProgress_Option","ETPop","disableEtModalVisible","et","etPop","etModalVisible","enableEtModalVisible","popChild","renderContent","eventName","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","processType","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","title","Modal_default","visible","onCancel","onOk","okText","cancelText","Panel","Collapse","MLSQLETQuick","Tabs","TabPane","onDragStart","dataTransfer","setData","queryApp","appendToEditor","renderPop","ETPop_ETPop","popName","collapse","margin","padding","header","gutter","card","tag_default","tyle","help","draggable","color","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","ButtonToCommand","makeSQL","MLSQLAceEditor","scriptId","aceEditorRef","executeSave","api","BackendConfig","messageBox","getMessageBoxAceEditor","id","getAceEditor","getValue","executeQuery","enterLoading","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","getDisplay","update","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","p","getCursorPosition","insert","focus","getDashBoard","dash","display","commandGroup","loading","resourceProgressRef","enter","taskProgressRef","exit","etOver","getData","etRef","className","MLSQLETQuick_MLSQLETQuick","onDragOver","preventDefault","onDrop","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_ResourceProgress","MLSQLAceEditor_TaskProgress","CommandGroup","es_button","onClick","ResourceProgress","_this3","mark","setTimeout","intervalTimer","setInterval","resourceCompute","hasOwnProperty","jsonArray","percent","activeTasks","totalCores","successPercent","currentJobGroupActiveTasks","clearInterval","progress","TaskProgress","_this4","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isDir","isExpanded","toggleIsExpanded","scriptFile","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","finish","create","endsWith","msg","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","formGroup","helperText","labelFor","labelInfo","inputGroup","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","removeFile","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","config","render","isPrototypeOf","substring","keys","basket","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","f","react_default","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","generateColor","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender2","jsonItem","moment","utc","timestamp","toDate","y1","inputRowsPerSecond","y2","processedRowsPerSecond","numInputRows","titleMap","titleMap2","Charts","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","MLSQLDash_Panel","tabs","defaultActiveKey","MLSQLDash_TabPane","tab","UploadDropZone_UploadDropzone","PureComponent","MLSQLQueryApp","refresh","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","src_components_MLSQLAceEditor","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","VIEW_CLUSTER","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","CLUSTER_VIEW_BackendForm","CLUSTER_VIEW_BackendList","CLUSTER_VIEW_SetBackendTags","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","CLUSTER_VIEW_BASIC","BackendForm","_submit","_this$state","tag","clusterMainPage","switchToBackendList","submit","validateForm","_this$state2","includes","Set","has","setName","setTag","setUrl","SetBackendTagsView","renderTags","SetBackendTagsView_Option","failStr","renderUsers","updateTag","setUser","updateUser","setDefaultBackend","users","mainPage","tagSelectRef","userSelectRef","Header","Layout","Content","Footer","Sider","MainPage","Menu","SubMenu","deleteBackend","loadBackends","activeTag","disabled","tableDisplayRef","operator","switchToBackendForm","currentView","switchToSetBackendTags","renderView","BackendForm_BackendForm","backendFormRef","SetBackendTagsView_SetBackendTagsView","setBackendTagsViewRef","renderViewIndex","onCollapse","collapsed","layout","minHeight","collapsible","es_menu","defaultSelectedKeys","Item","es_icon","breadcrumb","textAlign","ClusterApp","MainPage_MainPage","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","generateView","_this5","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","BigDL_BigDL","NLP_NLP","Basic_Basic","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","MainPage_Sider","block","MainPage_Header","MainPage_Content","Demos_Demos","MainPage_Footer","MLSQLDemoApp","demo_MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","fetchTeams","renderCommand","command","Commands","accept","refuse","actions","Meta","teams","teamInvite","InviteMember","renderTeams","MLSQLInviteMember","Views","renderTeamsForSelect","renderTeamsWithSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","renderMembers","members","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","fetchRoles","removeRole","renderRoles","roles","AddTableForTeam","teamTablesRef","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","AddTableForRole","roleTablesRef","onTeamSelect","fetchTables","fetchOperateTypes","renderTables","tables","renderOperateTypes","operateTypes","MLSQLAddTableForRole","RoleTables","onRoleSelect","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","operateType","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleTables_RoleTables","ClusterCards","switchToCluster","TeamCards_TeamCards","ClusterCards_ClusterCards","app","team_MainPage_Sider","team_MainPage_Header","team_MainPage_Content","team_MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","ClusterApp_ClusterApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6529c482.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    serverErrorCallback(str)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            serverErrorCallback(str)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        serverErrorCallback(str)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        evt.dataTransfer.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        evt.dataTransfer.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        evt.dataTransfer.setData(\"processType\", processType);\n        evt.dataTransfer.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        evt.dataTransfer.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        evt.dataTransfer.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        evt.dataTransfer.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        evt.dataTransfer.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        evt.dataTransfer.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\">Load data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\">Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\">TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\">Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.etRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId})\n        this.aceEditorRef.current.editor.setValue(value)\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        api.runScript({jobName: jobName, background: (this.state.background || false)}, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.getMessageBoxAceEditor().setValue(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.getMessageBoxAceEditor().setValue(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.getMessageBoxAceEditor().setValue(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n            self.exitLoading()\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n    }\n    etOver = (evt) => {\n        const eventName = evt.dataTransfer.getData(\"eventName\")\n        const popName = evt.dataTransfer.getData(\"popName\")\n        const processType = evt.dataTransfer.getData(\"processType\")\n        const pathAlias = evt.dataTransfer.getData(\"pathAlias\")\n        const tableHidden = evt.dataTransfer.getData(\"tableHidden\")\n        const pathHidden = evt.dataTransfer.getData(\"pathHidden\")\n        const outputTableHidden = evt.dataTransfer.getData(\"outputTableHidden\")\n        const outputTableAlias = evt.dataTransfer.getData(\"outputTableAlias\")\n        const tableAlias = evt.dataTransfer.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            this.etRef.current.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div>\n                    <MLSQLETQuick ref={this.etRef} parent={this}/>\n                </div>\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"300px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.parent = props.parent\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n                        if(self.resourceCompute===\"loading\"){\n                            return\n                        }\n                        self.resourceCompute=\"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            self.setState({\n                                percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                            })\n                            self.resourceCompute=\"loaded\"\n                        }, (str) => {\n                            self.resourceCompute=\"loaded\"\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if(self.taskCompute===\"loading\"){\n                            return\n                        }\n                        self.taskCompute=\"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute=\"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute=\"loaded\"\n                            try {\n                                self.parent.getMessageBoxAceEditor().setValue(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.taskCompute=\"loaded\"\n        this.resourceCompute=\"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.editor.current.text(scriptFile.content, node.id)\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.removeFile()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                        this.parent.setState({\n                            openCreateScriptDialog: true,\n                            nodeId: this.nodeId,\n                            isDir: true\n                        })\n                    }).bind(this)}/>\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\nimport Modal from \"../../node_modules/antd/lib/modal/Modal\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded\"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough.\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).toDate().getTime()\n            dataForRender.push({\n                x: x,\n                y1: jsonItem.inputRowsPerSecond,\n                y2: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                y1: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            titleMap: {y1: \"inputRowsPerSecond\", y2: \"processedRowsPerSecond\"},\n            dataForRender2: dataForRender2,\n            titleMap2: {y1: \"numInputRows\"}\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender}\n                titleMap={this.state.titleMap}\n            />\n            <TimelineChart\n                height={200}\n                data={this.state.dataForRender2}\n                titleMap={this.state.titleMap2}\n            />\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editor = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\n","import * as React from \"react\";\nimport {Button, FormGroup, InputGroup} from \"@blueprintjs/core\";\nimport './BackendForm.scss'\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER} from \"../../service/BackendConfig\";\n\n\nexport default class BackendForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {msg: \"\"}\n        this.clusterMainPage = props.parent\n    }\n\n    _submit = () => {\n        const {name, url, tag} = this.state\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const self = this\n        api.request2({\n            action: \"/backend/add\",\n            name: name,\n            tag: tag,\n            url: url\n        }, (json) => {\n            self.clusterMainPage.switchToBackendList()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n    }\n\n    submit = () => {\n        this.validateForm()\n    }\n\n    validateForm = () => {\n        const {name, url, tag} = this.state\n\n        if (!name || !url || !tag) {\n            this.setState({msg: `name, url ,tag should not empty`})\n            return\n        }\n\n        if (!url.includes(\":\")) {\n            this.setState({msg: `${url} should format like: ip/dns:port  `})\n            return\n        }\n\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            const nameSet = new Set(json.map(x => x.name))\n\n            if (nameSet.has(name)) {\n                this.setState({msg: `${name} exists`})\n                return\n            }\n\n            self._submit()\n        }, (str) => {\n            this.setState({msg: str})\n        })\n\n    }\n\n    setName = (e) => {\n        this.setState({name: e.target.value})\n    }\n    setTag = (e) => {\n        this.setState({tag: e.target.value})\n    }\n    setUrl = (e) => {\n        this.setState({url: e.target.value})\n    }\n\n    render() {\n        return (<div>\n                <FormGroup\n                    helperText=\"name\"\n                    label=\"the name of backend\"\n                    labelFor=\"name\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"name\" onChange={this.setName} placeholder=\"name\"/>\n                </FormGroup>\n                <FormGroup\n                    helperText=\"multi tag please use comma separate\"\n                    label=\"tag\"\n                    labelFor=\"tag\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"tag\" onChange={this.setTag} placeholder=\"tag\"/>\n                </FormGroup>\n\n                <FormGroup\n                    helperText=\"address\"\n                    label=\"url\"\n                    labelFor=\"url\"\n                    labelInfo=\"(required)\">\n                    <InputGroup id=\"url\" onChange={this.setUrl} placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                </FormGroup>\n\n                <Button type=\"submit\" text=\"Add\" onClick={this.submit}/>\n                {this.state.msg !== \"\" && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Input, Button, Card, Select} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {USERS_URL, CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst gridStyle = {\n    width: '25%',\n    textAlign: 'center',\n};\n\nconst Option = Select.Option;\n\nexport default class SetBackendTagsView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.mainPage = props.parent\n        this.state = {tags: [], renderTags: [], renderUsers: []}\n        this.tagSelectRef = React.createRef()\n        this.userSelectRef = React.createRef()\n\n\n        const self = this\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            if (backendTags) {\n                console.log(backendTags.split(\",\"))\n                self.setState({tags: backendTags.split(\",\")})\n            }\n            self.renderTags()\n            self.renderUsers()\n        })\n    }\n\n    /**\n     * This function is written in Prague O(∩_∩)O~\n     * I'am happy and maybe this will reduce the bugs in\n     * this code snippet.\n     */\n    renderTags = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            action: \"/backend/list\"\n        }, (json) => {\n            json.forEach((item) => {\n                item[\"tag\"].split(\",\").forEach((tag) => {\n                    self.state.renderTags.push(<Option key={tag}>{tag}</Option>)\n                })\n\n            })\n        }, (failStr) => {\n            self.setState({msg: failStr})\n        })\n    }\n\n    renderUsers = () => {\n        const self = this\n        const api = new MLSQLAPI(USERS_URL)\n        api.request2({}, (json) => {\n            json.forEach((name) => {\n                self.state.renderUsers.push(<Option key={name}>{name}</Option>)\n\n            })\n        }, (failStr) => {\n            self.setState({msg: failStr})\n        })\n\n    }\n\n\n    setTag = (value) => {\n        this.setState({updateTag: value})\n    }\n\n    setUser = (value) => {\n        this.setState({updateUser: value})\n    }\n\n    setDefaultBackend = () => {\n        const self = this\n        const api = new MLSQLAPI(USER_TAGS_UPDATE)\n        const tag = (this.state.updateTag || []).join(\",\")\n        const users = (this.state.updateUser || []).join(\",\")\n        if (tag) {\n            api.request2({\n                backendTags: tag,\n                users: users\n            }, (json) => {\n                self.mainPage.switchToBackendList()\n            }, (failStr) => {\n                self.setState({msg: failStr})\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                Backend Tag:\n\n                <div style={{\"margin\": \"10px 0px\"}}><Select\n                    mode=\"multiple\"\n                    style={{width: '100%'}}\n                    placeholder=\"Please select\"\n                    onChange={this.setTag}\n                    ref={this.tagSelectRef}\n                >\n                    {this.state.renderTags}\n                </Select>\n                </div>\n                For Users:\n                <div style={{\"margin\": \"10px 0px\"}}><Select\n                    mode=\"multiple\"\n                    style={{width: '100%'}}\n                    placeholder=\"Please select\"\n                    onChange={this.setUser}\n                    ref={this.userSelectRef}\n                >\n                    {this.state.renderUsers}\n                </Select>\n                </div>\n\n                <Button type=\"primary\" onClick={() => {\n                    this.setDefaultBackend()\n                }}>Update</Button>\n                <div>\n\n                </div>\n                {this.state.msg && <div className=\"mlsql-backend-messagebox\">{this.state.msg}</div>}\n\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CLUSTER_MANAGER, USER_TAGS_UPDATE} from \"../../service/BackendConfig\";\nimport {CLUSTER_VIEW_BackendForm, CLUSTER_VIEW_BackendList, CLUSTER_VIEW_SetBackendTags} from \"../../common/ViewConst\";\nimport BackendForm from \"./BackendForm\";\nimport SetBackendTagsView from \"./SetBackendTagsView\";\nimport {MLSQLAuth} from \"../../user/MLSQLAuth\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\nconst SubMenu = Menu.SubMenu;\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collapsed: false,\n            currentView: CLUSTER_VIEW_BackendList\n        };\n        this.tableDisplayRef = React.createRef()\n        this.backendFormRef = React.createRef()\n        this.setBackendTagsViewRef = React.createRef()\n    }\n\n\n    deleteBackend = (id) => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        api.request2({\n            id: id,\n            action: \"/backend/remove\"\n        }, (json) => {\n            self.switchToBackendList()\n        }, (str) => {\n\n        })\n    }\n\n    loadBackends = () => {\n        const self = this\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n\n        const auth = new MLSQLAuth()\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n            api.request2({\n                action: \"/backend/list\"\n            }, (json) => {\n\n                json.forEach((item) => {\n                    let activeTag = \"\"\n                    if (backendTags == item[\"tag\"]) {\n                        activeTag = <Button disabled={true} style={{color: \"green\"}}\n                                            type=\"primary\">Active</Button>\n                    }\n                    item[\"status\"] = activeTag\n                    item[\"operator\"] = <div>\n                        <Button type=\"danger\" onClick={() => {\n                            self.deleteBackend(item[\"id\"])\n                        }}>delete</Button>\n                    </div>\n                    delete item[\"tags\"]\n\n                })\n                self.tableDisplayRef.current.update(json, {\n                    render: {\n                        operator: (value) => {\n                            return <span>{value}</span>\n                        },\n                        status: (value) => {\n                            return <span>{value}</span>\n                        }\n                    }\n                })\n            }, (str) => {\n\n            })\n\n        })\n\n\n    }\n\n\n    switchToBackendForm = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendForm})\n    }\n\n    switchToBackendList = () => {\n        this.setState({currentView: CLUSTER_VIEW_BackendList})\n        this.loadBackends()\n    }\n\n    switchToSetBackendTags = () => {\n        this.setState({currentView: CLUSTER_VIEW_SetBackendTags})\n    }\n\n    renderView = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            this.loadBackends()\n            return <MLSQLQueryDisplay ref={this.tableDisplayRef} parent={this}/>\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return <BackendForm ref={this.backendFormRef} parent={this}/>\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return <SetBackendTagsView ref={this.setBackendTagsViewRef} parent={this}/>\n        }\n    }\n\n    renderViewIndex = () => {\n        if (this.state.currentView == CLUSTER_VIEW_BackendList) {\n            return '1'\n        }\n        if (this.state.currentView == CLUSTER_VIEW_BackendForm)\n            return '2'\n\n        if (this.state.currentView == CLUSTER_VIEW_SetBackendTags) {\n            return '3'\n        }\n        return '1'\n    }\n\n\n    onCollapse = (collapsed) => {\n        this.setState({collapsed});\n    }\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    onCollapse={this.onCollapse}\n                >\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[this.renderViewIndex()]} mode=\"inline\">\n                        <Menu.Item key=\"1\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendList}>List Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}} onClick={this.switchToBackendForm}>Add Backend</a></span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Icon type=\"desktop\"/>\n                            <span><a style={{color: \"white\"}}\n                                     onClick={this.switchToSetBackendTags}>Set Console Backend</a></span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <Breadcrumb style={{margin: '16px 0'}}>\n                            <Breadcrumb.Item></Breadcrumb.Item>\n                        </Breadcrumb>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from './MainPage'\n\nexport class ClusterApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"100px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=\"200\" where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this)\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this)\n    }\n    renderCommand = (value) => {\n        const command = new Commands(this, value)\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={command.accept}>accept</a>, <a onClick={command.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\nclass Commands {\n    constructor(teams, teamName) {\n        this.view = teams\n        this.teamName = teamName\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this.view, ACCEPT_TEAMS_MEMBER, this.teamName)\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this.view, REFUSE_TEAMS_MEMBER, this.teamName)\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderTeamsWithSelect = (self) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.teamTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name} value={item.id}>{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForRole} from \"./AddTableForRole\";\nimport {RoleTables} from \"./RoleTables\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.teamTablesRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Add Backend\" bordered={false}>\n\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"List Backends\" bordered={false}></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Set backend\" bordered={false}>\n\n                    </Card>\n                </Col>\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {CLUSTER_VIEW_BASIC, TEAM_VIEW_BASIC} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: TEAM_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"../common/ViewConst\";\nimport {ClusterApp} from \"../components/cluster/ClusterApp\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n        this.auth.userName((name) => {\n            this.setState({userName: name})\n        })\n\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_CLUSTER) return <ClusterApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            })\n            this.app.updateLoginoutStatus()\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToCluster = () => {\n        const auth = new MLSQLAuth()\n        const self = this\n        auth.user((user) => {\n            console.log(user[\"role\"])\n            if (user[\"role\"] == \"admin\") {\n                self.setState({currentView: VIEW_CLUSTER})\n            } else {\n                openNotificationWithIcon(\"error\", \"Auth Fail\", \"You are not allow to visit Cluster Manager\")\n            }\n        })\n\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Cluster\" onClick={this.switchToCluster}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}